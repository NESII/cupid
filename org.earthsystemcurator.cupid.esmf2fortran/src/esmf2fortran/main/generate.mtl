[comment encoding = UTF-8 /]
[module generate('http://www.earthsystemcurator.org/cupid/esmf', 'http://www.earthsystemcurator.org/cupid/sidl', 'http://www.eclipse.org/emf/2002/Ecore')]


[template public generateElement(ws : ESMFWorkspace)]
[comment @main/]
[for (c : ESMFComponent | ws.component)]
[genESMFComponent(c)/]
[/for]
[/template]

[template public genESMFComponent(c : ESMFComponent)]
[file (c.name + '.F90', false)]
module [c.name/]

	use ESMF
	! [protected ('use_statements')]
			
	! [/protected]
	[genESMFComponentBody(c)/]

end module
[/file]
[/template]

[template public genESMFComponentBody(c : ESMFComponent)/]

[template public genESMFComponentBody(c : ESMFGriddedComponent) ]
implicit none

private

[for (as : ESMFArraySpec | c.arraySpec)]
type(ESMF_ArraySpec) :: [as.name/]
[/for]

[for (g : ESMFGrid | c.grid)]
type(ESMF_Grid) :: [g.name/]
[/for]

[for (f : ESMFField | c.field)]
type(ESMF_Field) :: [f.name/]
[/for]

! [protected ('data_members')]
			
! [/protected]

public register_

contains
	
[genESMFRegisterMethod(c)/]

[for (stage : ESMFStage | c.stage) separator ('\n\n')]
[genESMFMethod(stage)/]
[/for]

! [protected ('extra_subroutines')]
			
! [/protected]
[/template]


[template public genESMFComponentBody(c : ESMFCouplerComponent)]
implicit none

private

public register_

contains
	
[genESMFRegisterMethod(c)/]

[for (m : ESMFMethod | c.method) separator ('\n\n')]
[comment [genESMFMethod(m)/]
[/for]
[/template]

[template public genESMFComponentBody(c : ESMFSimpleCouplerComponent)]
implicit none

private

public register_

contains
	
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc

	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_INITIALIZE, userRoutine = init_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_RUN, userRoutine = run_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_FINALIZE, userRoutine = finalize_, phase = 1, rc = rc)
end subroutine register_

subroutine init_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering init_"

end subroutine

subroutine run_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering run_"

end subroutine

subroutine finalize_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering finalize_"

end subroutine
[/template]

[template public genESMFRegisterMethod(c : ESMFComponent) ? (c.oclIsTypeOf(ESMFGriddedComponent))]
subroutine register_(gcomp, rc)
    type(ESMF_GridComp) :: gcomp
    integer, intent(out) :: rc

	[for (stage : ESMFStage | c.stage)]
	call ESMF_GridCompSetEntryPoint(gcomp, [getESMFMethodType(stage)/], userRoutine = [stage.name/], phase = [stage.phase/], rc = rc)
	[/for]

end subroutine register_
[/template]

[template public genESMFRegisterMethod(c : ESMFComponent) ? (c.oclIsTypeOf(ESMFCouplerComponent))]
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc

	[for (stage : ESMFStage | c.stage)]
	call ESMF_CplCompSetEntryPoint(ccomp, [getESMFMethodType(stage)/], userRoutine = [stage.name/], phase = [stage.phase/], rc = rc)
	[/for]

end subroutine register_
[/template]


[template public genESMFMethod(stage : ESMFStage)]
subroutine [stage.name/](gcomp, istate, ostate, clock, rc)	
	type(ESMF_GridComp) :: gcomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	! [protected (stage.name + '_' + stage.phase + '_data_members')]
			
	! [/protected]
	
	rc = ESMF_SUCCESS
	[genDebugInfo(stage.component.name, stage.name, 'enter')/]
		
	[genESMFMethodBody(stage)/]		
	
	! [protected (stage.name + '_' + stage.phase + '_code')]
	
	! [/protected]	

	[genDebugInfo(stage.component.name, stage.name, 'exit')/]	
end subroutine [stage.name/]
[/template]


[template public genESMFMethodBody(stage : ESMFStage)]
[for (action : ESMFStageAction | stage.action)]
[genESMFStageAction(action)/]
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageAction)]
! genESMFStageAction : [action.eClass()/]
[/template]

[template public genESMFStageAction(action : ESMFStageActionArraySpecCreate)]
[for (arraySpec : ESMFArraySpec | action.arraySpec)]
call ESMF_ArraySpecSet([arraySpec.name/], rank=[arraySpec.rank/], typekind=[arraySpec.typekind/], rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionGridInherit)]
[if (action.stage.component.oclIsTypeOf(ESMFGriddedComponent))]
call ESMF_GridCompGet(gcomp, grid=[action.grid.name/], rc=rc)	
[else]
call ESMF_CplCompGet(ccomp, grid=[action.grid.name/], rc=rc)
[/if]
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldCreate)]
[for (field : ESMFField | action.field)]
[field.name/] = ESMF_FieldCreate(grid=[field.grid.name/], arrayspec=[field.arraySpec.name/], &
                   indexflag=[field.index/], &
				   totalLWidth=[toFortranArrayConstructor(field.totalLWidth)/], &
				   totalUWidth=[toFortranArrayConstructor(field.totalUWidth)/], &
				   name="[field.name/]", rc=rc)

[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldDestroy)]
[for (field : ESMFField | action.field)]
call ESMF_FieldDestroy([field.name/] , rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionImportStateAdd)]
call ESMF_StateAdd(istate, &
        [for (item : ESMFStateItem | action.item) before ('(/') separator (', ') after ('/)')][item.name/][/for], & 
		rc=rc)      
[/template]

[template public genESMFStageAction(action : ESMFStageActionExportStateAdd)]
call ESMF_StateAdd(ostate, &
        [for (item : ESMFStateItem | action.item) before ('(/') separator (', ') after ('/)')][item.name/][/for], & 
		rc=rc)      
[/template]


[template public genDebugInfo(compName : String, methodName : String, action : String) post (trim())]
[if (action.equalsIgnoreCase('enter'))]
print "(A,T25,A)", "([compName/])", "entering [methodName/]"
[elseif (action.equalsIgnoreCase('exit'))]
print "(A,T25,A)", "([compName/])", "exiting [methodName/]"
[/if]
[/template]



[comment QUERIES ******************* /]

[template public getESMFMethodType(stage : ESMFStage) post (trim())]
[if (stage.oclIsKindOf(ESMFStageInitialize))]
ESMF_METHOD_INITIALIZE
[elseif (stage.oclIsKindOf(ESMFStageRun))]
ESMF_METHOD_RUN
[elseif (stage.oclIsKindOf(ESMFStageFinalize))]
ESMF_METHOD_FINALIZE
[else]
UNKNOWN
[/if]
[/template]

[template public toFortranArrayConstructor(intseq : Sequence(Integer)) post (trim())]
[for (i : Integer | intseq) before ('(/') separator (', ') after ('/)')][i/][/for]
[/template]


[comment ********************* to be removed /]





	