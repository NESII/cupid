[comment encoding = UTF-8 /]
[module generate('http://www.earthsystemcurator.org/cupid/esmf', 'http://www.earthsystemcurator.org/cupid/sidl', 'http://www.eclipse.org/emf/2002/Ecore')]


[template public generateElement(ws : ESMFWorkspace)]
[comment @main/]
[for (c : ESMFComponent | ws.component->filter(ESMFGriddedComponent))]
[genESMFComponent(c)/]
[/for]
[for (c : ESMFComponent | ws.component->filter(ESMFCouplerComponent))]
[genESMFComponent(c)/]
[/for]
[for (c : ESMFComponent | ws.component->filter(ESMFDriver))]
[genESMFComponent(c)/]
[/for]
[/template]

[template public genESMFComponent(c : ESMFComponent)]
[file (c.name + '.F90', false)]
module [c.name/]

	use ESMF
	[for (childComp : ESMFComponent | c.component)]
	use [childComp.name/], only:  [childComp.name/]_register => register_
	[/for]
	! [protected ('use_statements')]
			
	! [/protected]
	[genESMFComponentBody(c)/]

end module
[/file]
[/template]

[template public genESMFComponent(d : ESMFDriver)]
[file (d.name + '.F90', false)]
program [d.name/]

	use ESMF
	[for (childComp : ESMFComponent | d.component)]
	use [childComp.name/], only:  [childComp.name/]_register => register_
	[/for]
	! [protected ('use_statements')]
			
	! [/protected]
	
	[genESMFDriverBody(d)/]

end program
[/file]
[/template]

[template public genESMFDriverBody(d : ESMFDriver) ]
implicit none

[for (gridComp: ESMFGriddedComponent | d.component->filter(ESMFGriddedComponent))]
type(ESMF_GridComp) :: [gridComp.name/]
[/for]

[for (cplComp: ESMFCouplerComponent | d.component->filter(ESMFCouplerComponent))]
type(ESMF_CplComp) :: [cplComp.name/]
[/for]

[genESMFScopeDataMembers(d)/]

! [protected ('data_members')]
			
! [/protected]

[genDebugInfo(d.name, '', 'driverstart')/]

[for (stage : ESMFStage | d.stage) separator ('\n\n')]
! stage [stage.name/]
[genESMFStageAction(stage.actions)/]
[/for]

[genDebugInfo(d.name, '', 'driverend')/]
[/template]

[template public genESMFComponentBody(c : ESMFComponent)/]

[template public genESMFComponentBody(c : ESMFGriddedComponent) ]
implicit none

private

[for (gridComp: ESMFGriddedComponent | c.component->filter(ESMFGriddedComponent))]
type(ESMF_GridComp) :: [gridComp.name/]
[/for]

[for (cplComp: ESMFCouplerComponent | c.component->filter(ESMFCouplerComponent))]
type(ESMF_CplComp) :: [cplComp.name/]
[/for]

[genESMFScopeDataMembers(c)/]

! [protected ('data_members')]
			
! [/protected]

public register_

contains
	
[genESMFRegisterMethod(c)/]

[for (stage : ESMFStage | c.stage) separator ('\n\n')]
[genESMFMethod(stage)/]
[/for]

! [protected ('extra_subroutines')]
			
! [/protected]
[/template]


[template public genESMFComponentBody(c : ESMFCouplerComponent)]
implicit none

private

[genESMFScopeDataMembers(c)/]
! [protected ('data_members')]
			
! [/protected]

public register_

contains
	
[genESMFRegisterMethod(c)/]

[for (stage : ESMFStage | c.stage) separator ('\n\n')]
[genESMFMethod(stage)/]
[/for]

! [protected ('extra_subroutines')]
			
! [/protected]
[/template]

[template public genESMFComponentBody(c : ESMFSimpleCouplerComponent)]
implicit none

private

public register_

contains
	
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc

	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_INITIALIZE, userRoutine = init_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_RUN, userRoutine = run_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_FINALIZE, userRoutine = finalize_, phase = 1, rc = rc)
end subroutine register_

subroutine init_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering init_"

end subroutine

subroutine run_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering run_"

end subroutine

subroutine finalize_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering finalize_"

end subroutine
[/template]

[template public genESMFScopeDataMembers(scope : ESMFScope)]
[for (state : ESMFState | scope.item->filter(ESMFState)) ]
type(ESMF_State) :: [state.name/]
[/for]
[for (as : ESMFArraySpec | scope.item->filter(ESMFArraySpec))]
type(ESMF_ArraySpec) :: [as.name/]
[/for]
[for (g : ESMFGrid | scope.item->filter(ESMFGrid))]
type(ESMF_Grid) :: [g.name/]
[/for]
[for (f : ESMFField | scope.item->filter(ESMFField))]
type(ESMF_Field) :: [f.name/]
[/for]
[for (r : ESMFRouteHandle | scope.item->filter(ESMFRouteHandle))]
type(ESMF_RouteHandle) :: [r.name/]
[/for]
[/template]

[template public genESMFRegisterMethod(c : ESMFComponent) ? (c.oclIsTypeOf(ESMFGriddedComponent))]
subroutine register_(gcomp, rc)
    type(ESMF_GridComp) :: gcomp
    integer, intent(out) :: rc

	[for (stage : ESMFStage | c.stage)]
	call ESMF_GridCompSetEntryPoint(gcomp, [getESMFMethodType(stage)/], userRoutine = [stage.name/], phase = [stage.phase/], rc = rc)
	[/for]

end subroutine register_
[/template]

[template public genESMFRegisterMethod(c : ESMFComponent) ? (c.oclIsTypeOf(ESMFCouplerComponent))]
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc
	[genDebugInfo(c.name, 'register_', 'enter')/]

	[for (stage : ESMFStage | c.stage)]
	call ESMF_CplCompSetEntryPoint(ccomp, [getESMFMethodType(stage)/], userRoutine = [stage.name/], phase = [stage.phase/], rc = rc)
	[/for]

	[genDebugInfo(c.name, 'register_', 'exit')/]
end subroutine register_
[/template]


[template public genESMFMethod(stage : ESMFStage)]
subroutine [stage.name/](comp, istate, ostate, clock, rc)	
	[if (stage.component.oclIsTypeOf(ESMFGriddedComponent))]
	type(ESMF_GridComp) :: comp
	[else]
	type(ESMF_CplComp) :: comp
	[/if]
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc	
	
	[genESMFScopeDataMembers(stage)/]
	! [protected (stage.name + '_data_members')]
			
	! [/protected]
	
	rc = ESMF_SUCCESS
	[genDebugInfo(stage.component.name, stage.name, 'enter')/]
		
	[genESMFMethodBody(stage)/]		
	
	! [protected (stage.name + '_code')]
	
	! [/protected]	

	[genDebugInfo(stage.component.name, stage.name, 'exit')/]	
end subroutine [stage.name/]
[/template]


[template public genESMFMethodBody(stage : ESMFStage)]
[if (stage.actions->notEmpty())]
[genESMFStageAction(stage.actions)/]
[/if]
[/template]

[template public genESMFStageAction(action : ESMFStageAction)]
! genESMFStageAction : [action.eClass()/]
[/template]

[template public genESMFStageAction(action : ESMFStageActionSequence)]
[for (a : ESMFStageAction | action.action)]
[genESMFStageAction(a)/]
[/for]
[/template]


[template public genESMFStageAction(action : ESMFStageActionIterate)]
do while (.false.)
[for (a : ESMFStageAction | action.action)]
	[genESMFStageAction(a)/]
[/for]
end do
[/template]

[template public genESMFStageAction(action : ESMFStageActionIterateClock)]
do while (.not. ESMF_ClockIsStopTime(clock))
[for (a : ESMFStageAction | action.action)]
	[genESMFStageAction(a)/]
[/for]
	call ESMF_ClockAdvance(clock, rc=rc)	
end do
[/template]



[template public genESMFStageAction(action : ESMFStageActionArraySpecCreate)]
[for (arraySpec : ESMFArraySpec | action.arraySpec)]
call ESMF_ArraySpecSet([arraySpec.name/], rank=[arraySpec.rank/], typekind=[arraySpec.typekind/], rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionComponentCreate)]
[for (comp : ESMFComponent | action.component)]
[if (comp.oclIsTypeOf(ESMFGriddedComponent))]
[comp.name/] = ESMF_GridCompCreate(name="[comp.name/]", rc=rc)
call ESMF_GridCompSetServices([comp.name/], [comp.name/]_register, rc=rc)
[else]
[comp.name/] = ESMF_CplCompCreate(name="[comp.name/]", rc=rc)
call ESMF_CplCompSetServices([comp.name/], [comp.name/]_register, rc=rc)
[/if]
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionComponentDestroy)]
[for (comp : ESMFComponent | action.component)]
[if (comp.oclIsTypeOf(ESMFGriddedComponent))]
call ESMF_GridCompDestroy([comp.name/], rc=rc)
[else]
call ESMF_CplCompDestroy([comp.name/], rc=rc)
[/if]
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionComponentSetGrid)]
[if (action.component.oclIsTypeOf(ESMFGriddedComponent))]
call ESMF_GridCompSet([action.component.name/], grid=[action.grid.name/], rc=rc)
[else]
call ESMF_CplCompSet([action.component.name/], grid=[action.grid.name/], rc=rc)
[/if]
[/template]

[template public genESMFStageAction(action : ESMFStageActionExecuteStage)]
call [action.stageToExecute.getExecutionCommand()/]([action.stageToExecute.component.name/], &
		importState=[action.importState.name/], exportState=[action.exportState.name/], &
      	clock=clock, phase=[action.stageToExecute.phase/], rc=rc)  
[/template]

[query public getExecutionCommand(stage : ESMFStage) : String = 
	if (stage.component.oclIsTypeOf(ESMFGriddedComponent)) then
		if (stage.oclIsTypeOf(ESMFStageInitialize)) then
			'ESMF_GridCompInitialize'
		else 
			if (stage.oclIsTypeOf(ESMFStageFinalize)) then
			'ESMF_GridCompFinalize'
			else
			'ESMF_GridCompRun'
			endif
		endif
	else
		if (stage.oclIsTypeOf(ESMFStageInitialize)) then
			'ESMF_CplCompInitialize'
		else 
			if (stage.oclIsTypeOf(ESMFStageFinalize)) then
			'ESMF_CplCompFinalize'
			else
			'ESMF_CplCompRun'
			endif
		endif
	endif
/]


[template public genESMFStageAction(action : ESMFStageActionGridInherit)]
[if (action.getStage().component.oclIsTypeOf(ESMFGriddedComponent))]
call ESMF_GridCompGet(comp, grid=[action.grid.name/], rc=rc)	
[else]
call ESMF_CplCompGet(comp, grid=[action.grid.name/], rc=rc)
[/if]
[/template]

[query public getStage(a : ESMFStageAction) : ESMFStage = 
	if (a.oclIsTypeOf(ESMFStageActionSequence) and a.oclAsType(ESMFStageActionSequence).stage->notEmpty()) then
		a.oclAsType(ESMFStageActionSequence).stage
	else
		getStage(a.parent)
	endif 
/]


[template public genESMFStageAction(action : ESMFStageActionFieldCreate)]
[for (field : ESMFField | action.field)]
[field.name/] = ESMF_FieldCreate(grid=[field.grid.name/], arrayspec=[field.arraySpec.name/], &
                   indexflag=[field.index/], &
				   totalLWidth=[toFortranArrayConstructor(field.totalLWidth)/], &
				   totalUWidth=[toFortranArrayConstructor(field.totalUWidth)/], &
				   name="[field.name/]", rc=rc)

[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldDestroy)]
[for (field : ESMFField | action.field)]
call ESMF_FieldDestroy([field.name/] , rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionImportStateAdd)]
call ESMF_StateAdd(istate, &
        [for (item : ESMFStateItem | action.item) before ('(/') separator (', ') after ('/)')][item.name/][/for], & 
		rc=rc)      
[/template]

[template public genESMFStageAction(action : ESMFStageActionExportStateAdd)]
call ESMF_StateAdd(ostate, &
        [for (item : ESMFStateItem | action.item) before ('(/') separator (', ') after ('/)')][item.name/][/for], & 
		rc=rc)      
[/template]

[template public genESMFStageAction(action : ESMFStageActionImportStateGet)]
call ESMF_StateGet(istate, "[action.itemName/]", [action.item.name/], rc=rc)
[/template]

[template public genESMFStageAction(action : ESMFStageActionExportStateGet)]
call ESMF_StateGet(ostate, "[action.itemName/]", [action.item.name/], rc=rc)
[/template]

[template public genESMFStageAction(action : ESMFStageActionStateCreate)]
[for (state : ESMFState | action.state)]
[state.name/] = ESMF_StateCreate(name="[state.name/]", rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionStateDestroy)]
[for (state : ESMFState | action.state)]
call ESMF_StateDestroy([state.name/], rc=rc)
[/for]
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldRedistStore)]
call ESMF_FieldRedistStore([action.srcField.name/], [action.dstField.name/], routehandle=[action.routeHandle.name/], rc=rc)
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldRedist)]
call ESMF_FieldRedist([action.srcField.name/], [action.dstField.name/], routehandle=[action.routeHandle.name/], rc=rc)
[/template]

[template public genESMFStageAction(action : ESMFStageActionFieldRedistRelease)]
call ESMF_FieldRedistRelease([action.routeHandle.name/], rc=rc)
[/template]


[template public genDebugInfo(compName : String, methodName : String, action : String) post (trim())]
[if (action.equalsIgnoreCase('enter'))]
print "(A,T25,A)", "([compName/])", "entering [methodName/]"
[elseif (action.equalsIgnoreCase('exit'))]
print "(A,T25,A)", "([compName/])", "exiting [methodName/]"
[elseif (action.equalsIgnoreCase('driverstart'))]
print "(A,T25,A)", "([compName/])", "driver starting"
[elseif (action.equalsIgnoreCase('driverend'))]
print "(A,T25,A)", "([compName/])", "driver ending"
[/if]
[/template]



[comment QUERIES ******************* /]

[template public getESMFMethodType(stage : ESMFStage) post (trim())]
[if (stage.oclIsKindOf(ESMFStageInitialize))]
ESMF_METHOD_INITIALIZE
[elseif (stage.oclIsKindOf(ESMFStageRun))]
ESMF_METHOD_RUN
[elseif (stage.oclIsKindOf(ESMFStageFinalize))]
ESMF_METHOD_FINALIZE
[else]
UNKNOWN
[/if]
[/template]

[template public toFortranArrayConstructor(intseq : Sequence(Integer)) post (trim())]
[for (i : Integer | intseq) before ('(/') separator (', ') after ('/)')][i/][/for]
[/template]


[comment ********************* to be removed /]





	