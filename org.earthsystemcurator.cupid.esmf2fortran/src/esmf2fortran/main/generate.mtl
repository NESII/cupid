[comment encoding = UTF-8 /]
[module generate('http://www.earthsystemcurator.org/cupid/esmf', 'http://www.earthsystemcurator.org/cupid/sidl')]


[template public generateElement(ws : ESMFWorkspace)]
[comment @main/]
[for (c : ESMFComponent | ws.component)]
[genESMFComponent(c)/]
[/for]
[/template]

[template public genESMFComponent(c : ESMFComponent)]
[file (c.name + '.F90', false)]
module [c.name/]

	use ESMF
	[genESMFComponentBody(c)/]

end module
[/file]
[/template]

[template public genESMFComponentBody(c : ESMFComponent)/]

[template public genESMFComponentBody(c : ESMFGriddedComponent) ? (c.SIDLClass->notEmpty())]
use sidl
use sidl_BaseInterface
use [getSIDLQualName(c.SIDLClass)/]

implicit none

private

type([getSIDLTypeName(c.SIDLClass)/]) :: [getSIDLInstName(c.SIDLClass)/]
type(sidl_BaseInterface_t) :: exception_sidl

[comment sidl array for each field/]
[for (f : ESMFField | c.field->select(SIDLArgument->notEmpty()))]
type([genSIDLTypeName(f.SIDLArgument->first().type)/]) :: [f.name/]_sidl
[/for]

[for (f : ESMFField | c.field)]
type(ESMF_Field) :: [f.name/]
[/for]

[for (g : ESMFGrid | c.grid)]
type(ESMF_Grid) :: [g.name/]
[/for]

public register_

contains
	
[genESMFRegisterMethod(c.registerMethod)/]

[for (m : ESMFMethod | c.method) separator ('\n\n')]
[genESMFMethod(m)/]
[/for]
[/template]


[template public genESMFComponentBody(c : ESMFCouplerComponent)]
implicit none

private

public register_

contains
	
[genESMFRegisterMethod(c.registerMethod)/]

[for (m : ESMFMethod | c.method) separator ('\n\n')]
[genESMFMethod(m)/]
[/for]
[/template]

[template public genESMFComponentBody(c : ESMFSimpleCouplerComponent)]
implicit none

private

public register_

contains
	
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc

	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_INITIALIZE, userRoutine = init_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_RUN, userRoutine = run_, phase = 1, rc = rc)
	call ESMF_GridCompSetEntryPoint(ccomp, ESMF_METHOD_FINALIZE, userRoutine = finalize_, phase = 1, rc = rc)
end subroutine register_

subroutine init_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering init_"

end subroutine

subroutine run_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering run_"

end subroutine

subroutine finalize_(ccomp, istate, ostate, clock, rc)	
	type(ESMF_CplComp) :: ccomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([c.name/])", "entering finalize_"

end subroutine
[/template]

[template public genESMFRegisterMethod(r : ESMFRegisterMethod) ? (r.component.oclIsTypeOf(ESMFGriddedComponent))]
subroutine register_(gcomp, rc)
    type(ESMF_GridComp) :: gcomp
    integer, intent(out) :: rc

	[for (m : ESMFMethod | r.component.method)]
	call ESMF_GridCompSetEntryPoint(gcomp, [getESMFMethodType(m)/], userRoutine = [m.name/], phase = [m.phase/], rc = rc)
	[/for]

end subroutine register_
[/template]

[template public genESMFRegisterMethod(r : ESMFRegisterMethod) ? (r.component.oclIsTypeOf(ESMFCouplerComponent))]
subroutine register_(ccomp, rc)
    type(ESMF_CplComp) :: ccomp
    integer, intent(out) :: rc

	[for (m : ESMFMethod | r.component.method)]
	call ESMF_GridCompSetEntryPoint(ccomp, [getESMFMethodType(m)/], userRoutine = [m.name/], phase = [m.phase/], rc = rc)
	[/for]

end subroutine register_
[/template]



[template public genESMFMethod(m : ESMFMethod)]
subroutine [m.name/](gcomp, istate, ostate, clock, rc)	
	type(ESMF_GridComp) :: gcomp
	type(ESMF_State) :: istate
	type(ESMF_State) :: ostate
	type(ESMF_Clock) :: clock
	integer, intent(out) :: rc
	[genESMFMethodDeclaration(m)/]
	rc = ESMF_SUCCESS
	print "(A,T25,A)", "([m.component.name/])", "entering [m.name/]"

	[genESMFMethodBody(m)/]

end subroutine
[/template]

[template public genESMFMethodDeclaration(m : ESMFMethod)][/template]


[template public genESMFMethodBody(m : ESMFMethod) ? (not(m.SIDLMethod->notEmpty()))]
! genESMFMethodBody
[/template]

[template public genESMFMethodBody(m : ESMFMethod) ? (m.SIDLMethod->notEmpty())]
call [m.SIDLMethod.shortname/]([getSIDLInstName(m.component.SIDLClass)/], &
	[for (a : Argument | m.SIDLMethod.argument) separator (', &\n') after (', &\n')]
	[getESMFField(a, m.component).name/]_sidl[/for]
	exception_sidl)

if (not_null(exception_sidl)) then
	print *, "Exception calling [m.SIDLMethod.shortname/] on object [getSIDLInstName(m.component.SIDLClass)/]"
	rc = ESMF_FAILURE
end if
[/template]

[template public genESMFMethodBody(m : ESMFPreInitMethodSIDL)]
call new([getSIDLInstName(m.component.SIDLClass)/], exception_sidl)
if (not_null(exception_sidl)) then
	print *, "Exception when creating [getSIDLQualName(m.component.SIDLClass)/] object."
	rc = ESMF_FAILURE
end if
[/template]

[template public genESMFMethodDeclaration(m : ESMFPostInitMethodSIDL)]

[if (isUniformLogicallyRectangular(m.component))]
! uniform logically rectangular grid parameters
type(sidl_int_1d) :: lb, ub 
[/if]
[if (isIrregularDecomposition(m.component))]
! irregular decomposition parameters
type(sidl_int_1d) :: decompDim1, decompDim2, decompDim3
[/if]
[if (isHaloedField(m.component))]
! halo widths
type(sidl_int_1d) :: lhw, uhw
[/if]

[/template]

[template public genESMFMethodBody(m : ESMFPostInitMethodSIDL)]
[if (isUniformLogicallyRectangular(m.component))]
call getUniformLRGrid([getSIDLInstName(m.component.SIDLClass)/], lb, ub, exception_sidl)
if (not_null(exception_sidl)) then
    print *, "Exception calling [getSIDLInstName(m.component.SIDLClass)/].getUniformLRGrid"
	rc = ESMF_FAILURE
end if
[/if]

[if (isIrregularDecomposition(m.component))]
call getIrregularDecomposition([getSIDLInstName(m.component.SIDLClass)/], decompDim1, decompDim2, decompDim3, exception_sidl)
if (not_null(exception_sidl)) then
    print *, "Exception calling [getSIDLInstName(m.component.SIDLClass)/].getIrregularDecomposition"
	rc = ESMF_FAILURE
end if
[/if]

[comment assume one grid/]
[if (isIrregularDecomposition(m.component))]
if (not_null(decompDim3)) then
	[m.component.grid->asSequence()->first().name/] = ESMF_GridCreateNoPeriDim( &
			countsPerDEDim1=decompDim1%d_data, &
			countsPerDEDim2=decompDim2%d_data, &
			countsPerDEDim3=decompDim3%d_data, &
	        name = "[m.component.grid->asSequence()->first().name/]", &
			indexflag=ESMF_INDEX_GLOBAL, &
			rc=rc)
else
	[m.component.grid->asSequence()->first().name/] = ESMF_GridCreateNoPeriDim( &
			countsPerDEDim1=decompDim1%d_data, &
			countsPerDEDim2=decompDim2%d_data, &
	        name = "[m.component.grid->asSequence()->first().name/]", &
			indexflag=ESMF_INDEX_GLOBAL, &
			rc=rc)
end if
[/if]

[if (isHaloedField(m.component))]
call getHaloWidths([getSIDLInstName(m.component.SIDLClass)/], lhw, uhw, exception_sidl)
if (not_null(exception_sidl)) then
	print *, "Exception calling [getSIDLInstName(m.component.SIDLClass)/].getHaloWidths"
	rc = ESMF_FAILURE
	return	
end if
[/if]

[for (f : ESMFField | m.component.field)]
[f.name/] = ESMF_FieldCreate(name="[f.name/]", 
	grid = [m.component.grid->asSequence()->first().name/], & 
	farrayPtr = [f.name/]_sidl%d_data, &
    [if (isHaloedField(m.component))]
	totalLWidth = lhw%d_data, &
	totalUWidth = uhw%d_data, &
	[/if]
	rc = rc)

[/for]

! component import
[for (f : ESMFField | m.component.field->select(SIDLArgument->select(mode=ModeEnum::_in or mode=ModeEnum::inout)->notEmpty()))]
call ESMF_StateAdd(istate, (/[f.name/]/), rc=rc)
[/for]

! component export
[for (f : ESMFField | m.component.field->select(SIDLArgument->select(mode=ModeEnum::out or mode=ModeEnum::inout)->notEmpty()))]
call ESMF_StateAdd(ostate, (/[f.name/]/), rc=rc)
[/for]

[/template]

[template public genESMFMethodBody(m : ESMFFinalizeMethodSIDL)]
call deleteRef([getSIDLInstName(m.component.SIDLClass)/], exception_sidl)
if (not_null(exception_sidl)) then
	print *, "Exception when deleting [getSIDLInstName(m.component.SIDLClass)/] object."
	rc = ESMF_FAILURE
end if
[/template]

[query public isIrregularDecomposition (c : ESMFComponent) : Boolean = 
	c.SIDLClass.parentInterface.name->includes('IrregularDecomposition')
/]

[query public isUniformLogicallyRectangular (c : ESMFComponent) : Boolean = 
	c.SIDLClass.parentInterface.name->includes('UniformLogicallyRectangular')
/]

[query public isHaloedField (c : ESMFComponent) : Boolean = 
	c.SIDLClass.parentInterface.name->includes('HaloedField')
/]




[comment QUERIES ******************* /]


[template public genSIDLTypeName(t : SIDLType)][/template]

[template public genSIDLTypeName(t : ArrayType)]
sidl_[genSIDLTypeName(t.type)/]_[t.dim/]d
[/template]

[template public genSIDLTypeName(t : SimpleType)]
[t.simpleType.toString()/]
[/template]

[template public getESMFMethodType(m : ESMFMethod) post (trim())]
[if (m.oclIsKindOf(ESMFInitMethod))]
ESMF_METHOD_INITIALIZE
[elseif (m.oclIsKindOf(ESMFRunMethod))]
ESMF_METHOD_RUN
[elseif (m.oclIsKindOf(ESMFFinalizeMethod))]
ESMF_METHOD_FINALIZE
[else]
UNKNOWN
[/if]
[/template]


[query public getESMFField(a : Argument, c : ESMFComponent) : ESMFField = 
	c.field->select(SIDLArgument->includes(a))->asSequence()->first()
/]

[query public getSIDLQualName(c : Class) : String = 
	c._package.name + '_' + c.name 
/]

[query public getSIDLInstName(c : Class) : String = 
	getSIDLQualName(c) + '_inst'
/]

[query public getSIDLTypeName(c : Class) : String = 
	getSIDLQualName(c) + '_t'
/]

[query public getSIDLTypeName(t : SIDLType) : String = '' /]

[query public getSIDLTypeName(t : ArrayType) : String = 
	'sidl_' + getSIDLTypeName(t.type) + '_' + t.dim + 'd'	
/]

[query public getSIDLTypeName(t : SimpleType) : String = 
	t.simpleType.toString()
 /]



	