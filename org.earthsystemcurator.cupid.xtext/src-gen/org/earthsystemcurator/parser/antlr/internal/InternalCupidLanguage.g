/*
* generated by Xtext
*/
grammar InternalCupidLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.earthsystemcurator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.earthsystemcurator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.earthsystemcurator.services.CupidLanguageGrammarAccess;

}

@parser::members {

 	private CupidLanguageGrammarAccess grammarAccess;
 	
    public InternalCupidLanguageParser(TokenStream input, CupidLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Mappings";	
   	}
   	
   	@Override
   	protected CupidLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMappings
entryRuleMappings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingsRule()); }
	 iv_ruleMappings=ruleMappings 
	 { $current=$iv_ruleMappings.current; } 
	 EOF 
;

// Rule Mappings
ruleMappings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingsAccess().getMappingsMappingParserRuleCall_0()); 
	    }
		lv_mappings_0_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingsRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_0_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getContextPathExprParserRuleCall_0_0()); 
	    }
		lv_context_0_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"context",
        		lv_context_0_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getMappingImplicitContextMappingParserRuleCall_1_0()); 
	    }
		lv_mapping_1_0=ruleImplicitContextMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_1_0, 
        		"ImplicitContextMapping");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImplicitContextMapping
entryRuleImplicitContextMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicitContextMappingRule()); }
	 iv_ruleImplicitContextMapping=ruleImplicitContextMapping 
	 { $current=$iv_ruleImplicitContextMapping.current; } 
	 EOF 
;

// Rule ImplicitContextMapping
ruleImplicitContextMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getCallParserRuleCall()); 
    }
    this_Call_0=ruleCall
    { 
        $current = $this_Call_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCallAccess().getCallKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getSubroutineNameIDOrPathExprParserRuleCall_2_0()); 
	    }
		lv_subroutineName_2_0=ruleIDOrPathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"subroutineName",
        		lv_subroutineName_2_0, 
        		"IDOrPathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamsActualParamParserRuleCall_3_1_0_0()); 
	    }
		lv_params_4_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamsActualParamParserRuleCall_3_1_1_1_0()); 
	    }
		lv_params_6_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallAccess().getRightParenthesisKeyword_3_2());
    }
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleActualParam
entryRuleActualParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActualParamRule()); }
	 iv_ruleActualParam=ruleActualParam 
	 { $current=$iv_ruleActualParam.current; } 
	 EOF 
;

// Rule ActualParam
ruleActualParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_keyword_0_0=RULE_ID
		{
			newLeafNode(lv_keyword_0_0, grammarAccess.getActualParamAccess().getKeywordIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActualParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"ID");
	    }

)
)(
(
		lv_optional_1_0=	'?' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getActualParamAccess().getOptionalQuestionMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActualParamRule());
	        }
       		setWithLastConsumed($current, "optional", true, "?");
	    }

)
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActualParamAccess().getEqualsSignKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActualParamAccess().getValueIDOrPathExprParserRuleCall_1_0()); 
	    }
		lv_value_3_0=ruleIDOrPathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActualParamRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"IDOrPathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIDOrWildcard
entryRuleIDOrWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDOrWildcardRule()); }
	 iv_ruleIDOrWildcard=ruleIDOrWildcard 
	 { $current=$iv_ruleIDOrWildcard.current; } 
	 EOF 
;

// Rule IDOrWildcard
ruleIDOrWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getIDOrWildcardAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIDOrWildcardRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
    |(
(
		lv_wildcard_1_0=	'*' 
    {
        newLeafNode(lv_wildcard_1_0, grammarAccess.getIDOrWildcardAccess().getWildcardAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIDOrWildcardRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
))
;





// Entry rule entryRuleIDOrPathExpr
entryRuleIDOrPathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDOrPathExprRule()); }
	 iv_ruleIDOrPathExpr=ruleIDOrPathExpr 
	 { $current=$iv_ruleIDOrPathExpr.current; } 
	 EOF 
;

// Rule IDOrPathExpr
ruleIDOrPathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIDOrPathExprAccess().getIDOrWildcardParserRuleCall_0()); 
    }
    this_IDOrWildcard_0=ruleIDOrWildcard
    { 
        $current = $this_IDOrWildcard_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIDOrPathExprAccess().getPathExprParserRuleCall_1()); 
    }
    this_PathExpr_1=rulePathExpr
    { 
        $current = $this_PathExpr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePathExpr
entryRulePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprRule()); }
	 iv_rulePathExpr=rulePathExpr 
	 { $current=$iv_rulePathExpr.current; } 
	 EOF 
;

// Rule PathExpr
rulePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPathExprAccess().getNumberSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getSegmentsPathSegmentParserRuleCall_1_0()); 
	    }
		lv_segments_1_0=rulePathSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_1_0, 
        		"PathSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPathExprAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getSegmentsPathSegmentParserRuleCall_2_1_0()); 
	    }
		lv_segments_3_0=rulePathSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_3_0, 
        		"PathSegment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePathSegment
entryRulePathSegment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathSegmentRule()); } 
	 iv_rulePathSegment=rulePathSegment 
	 { $current=$iv_rulePathSegment.current.getText(); }  
	 EOF 
;

// Rule PathSegment
rulePathSegment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathSegmentAccess().getFullStopFullStopKeyword_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getPathSegmentAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


