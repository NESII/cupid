/*
* generated by Xtext
*/
grammar InternalCupidLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.earthsystemcurator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.earthsystemcurator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.earthsystemcurator.services.CupidLanguageGrammarAccess;

}

@parser::members {

 	private CupidLanguageGrammarAccess grammarAccess;
 	
    public InternalCupidLanguageParser(TokenStream input, CupidLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Language";	
   	}
   	
   	@Override
   	protected CupidLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLanguage
entryRuleLanguage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageRule()); }
	 iv_ruleLanguage=ruleLanguage 
	 { $current=$iv_ruleLanguage.current; } 
	 EOF 
;

// Rule Language
ruleLanguage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='language ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLanguageAccess().getLanguageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLanguageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_uri_2_0=RULE_STRING
		{
			newLeafNode(lv_uri_2_0, grammarAccess.getLanguageAccess().getUriSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"uri",
        		lv_uri_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLanguageAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageAccess().getConceptDefTopConceptDefParserRuleCall_4_0()); 
	    }
		lv_conceptDef_4_0=ruleTopConceptDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageRule());
	        }
       		add(
       			$current, 
       			"conceptDef",
        		lv_conceptDef_4_0, 
        		"TopConceptDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageAccess().getConceptDefNamedConceptDefParserRuleCall_5_0()); 
	    }
		lv_conceptDef_5_0=ruleNamedConceptDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageRule());
	        }
       		add(
       			$current, 
       			"conceptDef",
        		lv_conceptDef_5_0, 
        		"NamedConceptDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLanguageAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ANNOTATION_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getAnnotationAccess().getKeyANNOTATION_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ANNOTATION_ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAnnotationAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleAnonymousConceptDef
entryRuleAnonymousConceptDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnonymousConceptDefRule()); }
	 iv_ruleAnonymousConceptDef=ruleAnonymousConceptDef 
	 { $current=$iv_ruleAnonymousConceptDef.current; } 
	 EOF 
;

// Rule AnonymousConceptDef
ruleAnonymousConceptDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnonymousConceptDefAccess().getConceptDefAction_0(),
            $current);
    }
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnonymousConceptDefAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousConceptDefAccess().getMappingMappingParserRuleCall_1_1_0()); 
	    }
		lv_mapping_2_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousConceptDefRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_2_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnonymousConceptDefAccess().getGreaterThanSignKeyword_1_2());
    }
)?(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnonymousConceptDefAccess().getLeftCurlyBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousConceptDefAccess().getAnnotationAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotation_5_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousConceptDefRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_5_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousConceptDefAccess().getChildSubconceptOrAttributeParserRuleCall_2_2_0()); 
	    }
		lv_child_6_0=ruleSubconceptOrAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousConceptDefRule());
	        }
       		add(
       			$current, 
       			"child",
        		lv_child_6_0, 
        		"SubconceptOrAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnonymousConceptDefAccess().getRightCurlyBracketKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleNamedConceptDef
entryRuleNamedConceptDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedConceptDefRule()); }
	 iv_ruleNamedConceptDef=ruleNamedConceptDef 
	 { $current=$iv_ruleNamedConceptDef.current; } 
	 EOF 
;

// Rule NamedConceptDef
ruleNamedConceptDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_named_0_0=	'concept' 
    {
        newLeafNode(lv_named_0_0, grammarAccess.getNamedConceptDefAccess().getNamedConceptKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedConceptDefRule());
	        }
       		setWithLastConsumed($current, "named", true, "concept");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNamedConceptDefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedConceptDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedConceptDefAccess().getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedConceptDefAccess().getMappingMappingParserRuleCall_2_1_0()); 
	    }
		lv_mapping_3_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedConceptDefRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_3_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNamedConceptDefAccess().getGreaterThanSignKeyword_2_2());
    }
)?(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNamedConceptDefAccess().getLeftCurlyBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedConceptDefAccess().getAnnotationAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotation_6_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedConceptDefRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_6_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedConceptDefAccess().getChildSubconceptOrAttributeParserRuleCall_3_2_0()); 
	    }
		lv_child_7_0=ruleSubconceptOrAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedConceptDefRule());
	        }
       		add(
       			$current, 
       			"child",
        		lv_child_7_0, 
        		"SubconceptOrAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNamedConceptDefAccess().getRightCurlyBracketKeyword_3_3());
    }
)?)
;





// Entry rule entryRuleTopConceptDef
entryRuleTopConceptDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopConceptDefRule()); }
	 iv_ruleTopConceptDef=ruleTopConceptDef 
	 { $current=$iv_ruleTopConceptDef.current; } 
	 EOF 
;

// Rule TopConceptDef
ruleTopConceptDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_top_0_0=	'top' 
    {
        newLeafNode(lv_top_0_0, grammarAccess.getTopConceptDefAccess().getTopTopKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopConceptDefRule());
	        }
       		setWithLastConsumed($current, "top", true, "top");
	    }

)
)(
(
		lv_named_1_0=	'concept' 
    {
        newLeafNode(lv_named_1_0, grammarAccess.getTopConceptDefAccess().getNamedConceptKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopConceptDefRule());
	        }
       		setWithLastConsumed($current, "named", true, "concept");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTopConceptDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopConceptDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTopConceptDefAccess().getLessThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTopConceptDefAccess().getMappingMappingParserRuleCall_3_1_0()); 
	    }
		lv_mapping_4_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopConceptDefRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_4_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTopConceptDefAccess().getGreaterThanSignKeyword_3_2());
    }
)?(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTopConceptDefAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTopConceptDefAccess().getAnnotationAnnotationParserRuleCall_4_1_0()); 
	    }
		lv_annotation_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopConceptDefRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_7_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTopConceptDefAccess().getChildSubconceptOrAttributeParserRuleCall_4_2_0()); 
	    }
		lv_child_8_0=ruleSubconceptOrAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopConceptDefRule());
	        }
       		add(
       			$current, 
       			"child",
        		lv_child_8_0, 
        		"SubconceptOrAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTopConceptDefAccess().getRightCurlyBracketKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleSubconceptOrAttribute
entryRuleSubconceptOrAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubconceptOrAttributeRule()); }
	 iv_ruleSubconceptOrAttribute=ruleSubconceptOrAttribute 
	 { $current=$iv_ruleSubconceptOrAttribute.current; } 
	 EOF 
;

// Rule SubconceptOrAttribute
ruleSubconceptOrAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubconceptOrAttributeAccess().getSubconceptParserRuleCall_0()); 
    }
    this_Subconcept_0=ruleSubconcept
    { 
        $current = $this_Subconcept_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSubconceptOrAttributeAccess().getAttributeParserRuleCall_1()); 
    }
    this_Attribute_1=ruleAttribute
    { 
        $current = $this_Attribute_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubconcept
entryRuleSubconcept returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubconceptRule()); }
	 iv_ruleSubconcept=ruleSubconcept 
	 { $current=$iv_ruleSubconcept.current; } 
	 EOF 
;

// Rule Subconcept
ruleSubconcept returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSubconceptAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubconceptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubconceptAccess().getCardinalityCardinalityParserRuleCall_1_0()); 
	    }
		lv_cardinality_1_0=ruleCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubconceptRule());
	        }
       		set(
       			$current, 
       			"cardinality",
        		lv_cardinality_1_0, 
        		"Cardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_essential_2_0=	'!' 
    {
        newLeafNode(lv_essential_2_0, grammarAccess.getSubconceptAccess().getEssentialExclamationMarkKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubconceptRule());
	        }
       		setWithLastConsumed($current, "essential", true, "!");
	    }

)
)?
    |(
(
		lv_mustBeNull_3_0=	'!!' 
    {
        newLeafNode(lv_mustBeNull_3_0, grammarAccess.getSubconceptAccess().getMustBeNullExclamationMarkExclamationMarkKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubconceptRule());
	        }
       		setWithLastConsumed($current, "mustBeNull", true, "!!");
	    }

)
))((	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubconceptAccess().getColonKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubconceptAccess().getDefNamedConceptDefParserRuleCall_3_0_1_0()); 
	    }
		lv_def_5_0=ruleNamedConceptDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubconceptRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_5_0, 
        		"NamedConceptDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSubconceptAccess().getDefAnonymousConceptDefParserRuleCall_3_1_0()); 
	    }
		lv_def_6_0=ruleAnonymousConceptDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubconceptRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_6_0, 
        		"AnonymousConceptDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_reference_7_0=	':' 
    {
        newLeafNode(lv_reference_7_0, grammarAccess.getSubconceptAccess().getReferenceColonKeyword_3_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubconceptRule());
	        }
       		setWithLastConsumed($current, "reference", true, ":");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubconceptRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getSubconceptAccess().getRefConceptDefCrossReference_3_2_1_0()); 
	}

)
))))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attrib_0_0=	'attrib' 
    {
        newLeafNode(lv_attrib_0_0, grammarAccess.getAttributeAccess().getAttribAttribKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "attrib", true, "attrib");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getCardinalityCardinalityParserRuleCall_2_0()); 
	    }
		lv_cardinality_2_0=ruleCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"cardinality",
        		lv_cardinality_2_0, 
        		"Cardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_essential_3_0=	'!' 
    {
        newLeafNode(lv_essential_3_0, grammarAccess.getAttributeAccess().getEssentialExclamationMarkKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "essential", true, "!");
	    }

)
)?
    |(
(
		lv_mustBeNull_4_0=	'!!' 
    {
        newLeafNode(lv_mustBeNull_4_0, grammarAccess.getAttributeAccess().getMustBeNullExclamationMarkExclamationMarkKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "mustBeNull", true, "!!");
	    }

)
))(	otherlv_5='<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributeAccess().getLessThanSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getAttribMappingMappingParserRuleCall_4_1_0()); 
	    }
		lv_attribMapping_6_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"attribMapping",
        		lv_attribMapping_6_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAttributeAccess().getGreaterThanSignKeyword_4_2());
    }
)?(	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getAnnotationAnnotationParserRuleCall_5_1_0()); 
	    }
		lv_annotation_9_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_9_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_5_2());
    }
)?)
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_zeroOrOne_0_0=	'?' 
    {
        newLeafNode(lv_zeroOrOne_0_0, grammarAccess.getCardinalityAccess().getZeroOrOneQuestionMarkKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCardinalityRule());
	        }
       		setWithLastConsumed($current, "zeroOrOne", true, "?");
	    }

)
)
    |(
(
		lv_zeroOrMore_1_0=	'*' 
    {
        newLeafNode(lv_zeroOrMore_1_0, grammarAccess.getCardinalityAccess().getZeroOrMoreAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCardinalityRule());
	        }
       		setWithLastConsumed($current, "zeroOrMore", true, "*");
	    }

)
)
    |(
(
		lv_oneOrMore_2_0=	'+' 
    {
        newLeafNode(lv_oneOrMore_2_0, grammarAccess.getCardinalityAccess().getOneOrMorePlusSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCardinalityRule());
	        }
       		setWithLastConsumed($current, "oneOrMore", true, "+");
	    }

)
))
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getContextPathExprParserRuleCall_0_0()); 
	    }
		lv_context_0_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"context",
        		lv_context_0_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getMappingImplicitContextMappingParserRuleCall_1_0()); 
	    }
		lv_mapping_1_0=ruleImplicitContextMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_1_0, 
        		"ImplicitContextMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='before' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingAccess().getBeforeKeyword_2_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMappingAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getBeforePathExprParserRuleCall_2_2_0()); 
	    }
		lv_before_4_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"before",
        		lv_before_4_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMappingAccess().getRightParenthesisKeyword_2_3());
    }
)?(	otherlv_6='after' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMappingAccess().getAfterKeyword_3_0());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMappingAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getAfterPathExprParserRuleCall_3_2_0()); 
	    }
		lv_after_8_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"after",
        		lv_after_8_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMappingAccess().getRightParenthesisKeyword_3_3());
    }
)?)
;





// Entry rule entryRuleImplicitContextMapping
entryRuleImplicitContextMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicitContextMappingRule()); }
	 iv_ruleImplicitContextMapping=ruleImplicitContextMapping 
	 { $current=$iv_ruleImplicitContextMapping.current; } 
	 EOF 
;

// Rule ImplicitContextMapping
ruleImplicitContextMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getModuleParserRuleCall_0()); 
    }
    this_Module_0=ruleModule
    { 
        $current = $this_Module_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getModuleNameParserRuleCall_1()); 
    }
    this_ModuleName_1=ruleModuleName
    { 
        $current = $this_ModuleName_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getUsesModuleParserRuleCall_2()); 
    }
    this_UsesModule_2=ruleUsesModule
    { 
        $current = $this_UsesModule_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getUsesEntityParserRuleCall_3()); 
    }
    this_UsesEntity_3=ruleUsesEntity
    { 
        $current = $this_UsesEntity_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getCallParserRuleCall_4()); 
    }
    this_Call_4=ruleCall
    { 
        $current = $this_Call_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getSubroutineParserRuleCall_5()); 
    }
    this_Subroutine_5=ruleSubroutine
    { 
        $current = $this_Subroutine_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getSubroutineNameParserRuleCall_6()); 
    }
    this_SubroutineName_6=ruleSubroutineName
    { 
        $current = $this_SubroutineName_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getActualParamByKeywordParserRuleCall_7()); 
    }
    this_ActualParamByKeyword_7=ruleActualParamByKeyword
    { 
        $current = $this_ActualParamByKeyword_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getVariableDeclarationParserRuleCall_8()); 
    }
    this_VariableDeclaration_8=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_8.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplicitContextMappingAccess().getDeclaredEntityAction_9_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getDeclaredEntityParserRuleCall_9_1()); 
    }
ruleDeclaredEntity
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getImplicitContextMappingAccess().getFunctionAssignmentParserRuleCall_10()); 
    }
    this_FunctionAssignment_11=ruleFunctionAssignment
    { 
        $current = $this_FunctionAssignment_11.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleAccess().getModuleAction_0(),
            $current);
    }
)	otherlv_1='module' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getModuleKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameExprParserRuleCall_2_1_0()); 
	    }
		lv_name_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleModuleName
entryRuleModuleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleNameRule()); }
	 iv_ruleModuleName=ruleModuleName 
	 { $current=$iv_ruleModuleName.current; } 
	 EOF 
;

// Rule ModuleName
ruleModuleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleNameAccess().getModuleNameAction_0(),
            $current);
    }
)	otherlv_1='moduleName' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleNameAccess().getModuleNameKeyword_1());
    }
)
;





// Entry rule entryRuleUsesModule
entryRuleUsesModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesModuleRule()); }
	 iv_ruleUsesModule=ruleUsesModule 
	 { $current=$iv_ruleUsesModule.current; } 
	 EOF 
;

// Rule UsesModule
ruleUsesModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='usesModule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUsesModuleAccess().getUsesModuleKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUsesModuleAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUsesModuleAccess().getNameExprParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUsesModuleAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleUsesEntity
entryRuleUsesEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesEntityRule()); }
	 iv_ruleUsesEntity=ruleUsesEntity 
	 { $current=$iv_ruleUsesEntity.current; } 
	 EOF 
;

// Rule UsesEntity
ruleUsesEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='usesEntity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUsesEntityAccess().getUsesEntityKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUsesEntityAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUsesEntityAccess().getNameExprParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUsesEntityAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSubroutine
entryRuleSubroutine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubroutineRule()); }
	 iv_ruleSubroutine=ruleSubroutine 
	 { $current=$iv_ruleSubroutine.current; } 
	 EOF 
;

// Rule Subroutine
ruleSubroutine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subroutine' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubroutineAccess().getSubroutineKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubroutineAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineAccess().getNameExprParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubroutineAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineAccess().getParamsFormalParamParserRuleCall_3_1_0_0()); 
	    }
		lv_params_4_0=ruleFormalParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"FormalParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubroutineAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineAccess().getParamsFormalParamParserRuleCall_3_1_1_1_0()); 
	    }
		lv_params_6_0=ruleFormalParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"FormalParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSubroutineAccess().getRightParenthesisKeyword_3_2());
    }
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSubroutineAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleFormalParam
entryRuleFormalParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParamRule()); }
	 iv_ruleFormalParam=ruleFormalParam 
	 { $current=$iv_ruleFormalParam.current; } 
	 EOF 
;

// Rule FormalParam
ruleFormalParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParamAccess().getIntentIntentParserRuleCall_0_0()); 
	    }
		lv_intent_0_0=ruleIntent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParamRule());
	        }
       		set(
       			$current, 
       			"intent",
        		lv_intent_0_0, 
        		"Intent");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParamAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParamAccess().getNameExprParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParamRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntent
entryRuleIntent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntentRule()); }
	 iv_ruleIntent=ruleIntent 
	 { $current=$iv_ruleIntent.current; } 
	 EOF 
;

// Rule Intent
ruleIntent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_in_0_0=	'in' 
    {
        newLeafNode(lv_in_0_0, grammarAccess.getIntentAccess().getInInKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntentRule());
	        }
       		setWithLastConsumed($current, "in", true, "in");
	    }

)
)
    |(
(
		lv_out_1_0=	'out' 
    {
        newLeafNode(lv_out_1_0, grammarAccess.getIntentAccess().getOutOutKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntentRule());
	        }
       		setWithLastConsumed($current, "out", true, "out");
	    }

)
)
    |(
(
		lv_inout_2_0=	'inout' 
    {
        newLeafNode(lv_inout_2_0, grammarAccess.getIntentAccess().getInoutInoutKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntentRule());
	        }
       		setWithLastConsumed($current, "inout", true, "inout");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_integer_0_0=	'integer' 
    {
        newLeafNode(lv_integer_0_0, grammarAccess.getTypeAccess().getIntegerIntegerKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "integer", true, "integer");
	    }

)
)
    |(
(
		lv_character_1_0=	'character' 
    {
        newLeafNode(lv_character_1_0, grammarAccess.getTypeAccess().getCharacterCharacterKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "character", true, "character");
	    }

)
)
    |(
(
		lv_logical_2_0=	'logical' 
    {
        newLeafNode(lv_logical_2_0, grammarAccess.getTypeAccess().getLogicalLogicalKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "logical", true, "logical");
	    }

)
)
    |(
(
		lv_real_3_0=	'real' 
    {
        newLeafNode(lv_real_3_0, grammarAccess.getTypeAccess().getRealRealKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "real", true, "real");
	    }

)
)
    |((
(
		lv_double_4_0=	'double' 
    {
        newLeafNode(lv_double_4_0, grammarAccess.getTypeAccess().getDoubleDoubleKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "double", true, "double");
	    }

)
)(	otherlv_5='precision' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getPrecisionKeyword_4_1());
    }
)?)
    |((
(
		lv_derived_6_0=	'type' 
    {
        newLeafNode(lv_derived_6_0, grammarAccess.getTypeAccess().getDerivedTypeKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "derived", true, "type");
	    }

)
)	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getDerivedTypeExprParserRuleCall_5_2_0()); 
	    }
		lv_derivedType_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_8_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getRightParenthesisKeyword_5_3());
    }
))
;





// Entry rule entryRuleSubroutineName
entryRuleSubroutineName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubroutineNameRule()); }
	 iv_ruleSubroutineName=ruleSubroutineName 
	 { $current=$iv_ruleSubroutineName.current; } 
	 EOF 
;

// Rule SubroutineName
ruleSubroutineName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subroutineName' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubroutineNameAccess().getSubroutineNameKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubroutineNameAccess().getSubroutineNameAction_1(),
            $current);
    }
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubroutineNameAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineNameAccess().getNameExprParserRuleCall_2_1_0()); 
	    }
		lv_name_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubroutineNameAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCallAccess().getCallKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getSubroutineNameExprParserRuleCall_2_0()); 
	    }
		lv_subroutineName_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"subroutineName",
        		lv_subroutineName_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamsActualParamParserRuleCall_3_1_0_0()); 
	    }
		lv_params_4_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamsActualParamParserRuleCall_3_1_1_1_0()); 
	    }
		lv_params_6_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallAccess().getRightParenthesisKeyword_3_2());
    }
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleActualParam
entryRuleActualParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActualParamRule()); }
	 iv_ruleActualParam=ruleActualParam 
	 { $current=$iv_ruleActualParam.current; } 
	 EOF 
;

// Rule ActualParam
ruleActualParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_keyword_0_0=RULE_ID
		{
			newLeafNode(lv_keyword_0_0, grammarAccess.getActualParamAccess().getKeywordIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActualParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"ID");
	    }

)
)(
(
		lv_optional_1_0=	'?' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getActualParamAccess().getOptionalQuestionMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActualParamRule());
	        }
       		setWithLastConsumed($current, "optional", true, "?");
	    }

)
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActualParamAccess().getEqualsSignKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActualParamAccess().getValueExprParserRuleCall_1_0()); 
	    }
		lv_value_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActualParamRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleActualParamByKeyword
entryRuleActualParamByKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActualParamByKeywordRule()); }
	 iv_ruleActualParamByKeyword=ruleActualParamByKeyword 
	 { $current=$iv_ruleActualParamByKeyword.current; } 
	 EOF 
;

// Rule ActualParamByKeyword
ruleActualParamByKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='actualParamByKeyword' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActualParamByKeywordAccess().getActualParamByKeywordKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActualParamByKeywordAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_keyword_2_0=RULE_ID
		{
			newLeafNode(lv_keyword_2_0, grammarAccess.getActualParamByKeywordAccess().getKeywordIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActualParamByKeywordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActualParamByKeywordAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='declaration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getDeclarationKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleDeclaredEntity
entryRuleDeclaredEntity returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredEntityRule()); } 
	 iv_ruleDeclaredEntity=ruleDeclaredEntity 
	 { $current=$iv_ruleDeclaredEntity.current.getText(); }  
	 EOF 
;

// Rule DeclaredEntity
ruleDeclaredEntity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='declaredEntity' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclaredEntityAccess().getDeclaredEntityKeyword()); 
    }

    ;





// Entry rule entryRuleFunctionAssignment
entryRuleFunctionAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionAssignmentRule()); }
	 iv_ruleFunctionAssignment=ruleFunctionAssignment 
	 { $current=$iv_ruleFunctionAssignment.current; } 
	 EOF 
;

// Rule FunctionAssignment
ruleFunctionAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='functionAssignment' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAssignmentAccess().getFunctionAssignmentKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAssignmentAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getLhsExprParserRuleCall_2_0()); 
	    }
		lv_lhs_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAssignmentRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAssignmentAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getFunctionNameExprParserRuleCall_4_0()); 
	    }
		lv_functionName_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAssignmentRule());
	        }
       		set(
       			$current, 
       			"functionName",
        		lv_functionName_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAssignmentAccess().getLeftParenthesisKeyword_5_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getParamsActualParamParserRuleCall_5_1_0_0()); 
	    }
		lv_params_6_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAssignmentRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionAssignmentAccess().getCommaKeyword_5_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAssignmentAccess().getParamsActualParamParserRuleCall_5_1_1_1_0()); 
	    }
		lv_params_8_0=ruleActualParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAssignmentRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_8_0, 
        		"ActualParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionAssignmentAccess().getRightParenthesisKeyword_5_2());
    }
)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionAssignmentAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleLocalExpression
entryRuleLocalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalExpressionRule()); }
	 iv_ruleLocalExpression=ruleLocalExpression 
	 { $current=$iv_ruleLocalExpression.current; } 
	 EOF 
;

// Rule LocalExpression
ruleLocalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getLocalExpressionAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalExpressionAccess().getLiteralLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalExpressionRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_wildcard_0_0=	'*' 
    {
        newLeafNode(lv_wildcard_0_0, grammarAccess.getExprAccess().getWildcardAsteriskKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExprLocalExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleLocalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"LocalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getPathExprPathExprParserRuleCall_2_0()); 
	    }
		lv_pathExpr_2_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"pathExpr",
        		lv_pathExpr_2_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }
)+
    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulePathExpr
entryRulePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprRule()); }
	 iv_rulePathExpr=rulePathExpr 
	 { $current=$iv_rulePathExpr.current; } 
	 EOF 
;

// Rule PathExpr
rulePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPathExprAccess().getNumberSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getPathExprAccess().getPathExprNodeParserRuleCall_1()); 
    }
    this_PathExprNode_1=rulePathExprNode
    { 
        $current = $this_PathExprNode_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePathExprNode
entryRulePathExprNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprNodeRule()); }
	 iv_rulePathExprNode=rulePathExprNode 
	 { $current=$iv_rulePathExprNode.current; } 
	 EOF 
;

// Rule PathExprNode
rulePathExprNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPathExprNodeAccess().getPathExprTermParserRuleCall_0()); 
    }
    this_PathExprTerm_0=rulePathExprTerm
    { 
        $current = $this_PathExprTerm_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPathExprNodeAccess().getPathExprHeadAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPathExprNodeAccess().getSolidusKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPathExprNodeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPathExprNodeAccess().getTailSubconceptOrAttributeCrossReference_1_2_0()); 
	}

)
))*)
;





// Entry rule entryRulePathExprTerm
entryRulePathExprTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprTermRule()); }
	 iv_rulePathExprTerm=rulePathExprTerm 
	 { $current=$iv_rulePathExprTerm.current; } 
	 EOF 
;

// Rule PathExprTerm
rulePathExprTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPathExprTermAccess().getPathExprTermAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprTermAccess().getAxisAxisParserRuleCall_1_0()); 
	    }
		lv_axis_1_0=ruleAxis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprTermRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_1_0, 
        		"Axis");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPathExprTermRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPathExprTermAccess().getRefSubconceptOrAttributeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleAxis
entryRuleAxis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxisRule()); }
	 iv_ruleAxis=ruleAxis 
	 { $current=$iv_ruleAxis.current; } 
	 EOF 
;

// Rule Axis
ruleAxis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_ancestor_0_0=	'^' 
    {
        newLeafNode(lv_ancestor_0_0, grammarAccess.getAxisAccess().getAncestorCircumflexAccentKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAxisRule());
	        }
       		setWithLastConsumed($current, "ancestor", true, "^");
	    }

)
)
;





RULE_ANNOTATION_ID : '@' RULE_ID;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


