/*
* generated by Xtext
*/
package org.earthsystemcurator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CupidLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriSTRINGTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConceptDefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConceptDefTopConceptDefParserRuleCall_4_0 = (RuleCall)cConceptDefAssignment_4.eContents().get(0);
		private final Assignment cConceptDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConceptDefNamedConceptDefParserRuleCall_5_0 = (RuleCall)cConceptDefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Language:
		//	"language " name=ID uri=STRING "{" conceptDef+=TopConceptDef conceptDef+=NamedConceptDef* "}";
		public ParserRule getRule() { return rule; }

		//"language " name=ID uri=STRING "{" conceptDef+=TopConceptDef conceptDef+=NamedConceptDef* "}"
		public Group getGroup() { return cGroup; }

		//"language "
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//uri=STRING
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_2_0() { return cUriSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//conceptDef+=TopConceptDef
		public Assignment getConceptDefAssignment_4() { return cConceptDefAssignment_4; }

		//TopConceptDef
		public RuleCall getConceptDefTopConceptDefParserRuleCall_4_0() { return cConceptDefTopConceptDefParserRuleCall_4_0; }

		//conceptDef+=NamedConceptDef*
		public Assignment getConceptDefAssignment_5() { return cConceptDefAssignment_5; }

		//NamedConceptDef
		public RuleCall getConceptDefNamedConceptDefParserRuleCall_5_0() { return cConceptDefNamedConceptDefParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		////Subconcept:
		////	AnonymousConcept | ConceptRef | Attribute;
		////Subconcept:
		////	attrib?='attrib'? name=ID cardinality=Cardinality? essential?='!'?
		////	(
		////		ref?=':' conceptDef=[ConceptDef] |
		////		('<' mapping=Mapping '>')? ('[' annotation+=Annotation (',' annotation+=Annotation)* ']')? body=ConceptDefBody?	
		////	);
		//Annotation:
		//	key=ANNOTATION_ID ("=" value=STRING)?;
		public ParserRule getRule() { return rule; }

		//key=ANNOTATION_ID ("=" value=STRING)?
		public Group getGroup() { return cGroup; }

		//key=ANNOTATION_ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ANNOTATION_ID
		public RuleCall getKeyANNOTATION_IDTerminalRuleCall_0_0() { return cKeyANNOTATION_IDTerminalRuleCall_0_0; }

		//("=" value=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
	}

	public class AnonymousConceptDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnonymousConceptDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConceptDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMappingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMappingMappingParserRuleCall_1_1_0 = (RuleCall)cMappingAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationAssignment_2_1.eContents().get(0);
		private final Assignment cChildAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cChildSubconceptOrAttributeParserRuleCall_2_2_0 = (RuleCall)cChildAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		////ConceptDef:
		////	(top?='/top'? named?='concept' name=ID)? ('<' mapping=Mapping '>')? 
		////		('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
		////		('{' localName=ID '}')?;
		////ConceptDef:
		////	AnonymousConceptDef | NamedConceptDef;
		//AnonymousConceptDef returns ConceptDef:
		//	{ConceptDef} ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//{ConceptDef} ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//{ConceptDef}
		public Action getConceptDefAction_0() { return cConceptDefAction_0; }

		//("<" mapping=Mapping ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//mapping=Mapping
		public Assignment getMappingAssignment_1_1() { return cMappingAssignment_1_1; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_1_1_0() { return cMappingMappingParserRuleCall_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }

		//("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_2_1() { return cAnnotationAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_2_1_0() { return cAnnotationAnnotationParserRuleCall_2_1_0; }

		//child+=SubconceptOrAttribute*
		public Assignment getChildAssignment_2_2() { return cChildAssignment_2_2; }

		//SubconceptOrAttribute
		public RuleCall getChildSubconceptOrAttributeParserRuleCall_2_2_0() { return cChildSubconceptOrAttributeParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class NamedConceptDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedConceptDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamedConceptKeyword_0_0 = (Keyword)cNamedAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMappingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMappingMappingParserRuleCall_2_1_0 = (RuleCall)cMappingAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAnnotationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_1_0 = (RuleCall)cAnnotationAssignment_3_1.eContents().get(0);
		private final Assignment cChildAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cChildSubconceptOrAttributeParserRuleCall_3_2_0 = (RuleCall)cChildAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//NamedConceptDef returns ConceptDef:
		//	named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//named?="concept"
		public Assignment getNamedAssignment_0() { return cNamedAssignment_0; }

		//"concept"
		public Keyword getNamedConceptKeyword_0_0() { return cNamedConceptKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" mapping=Mapping ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//mapping=Mapping
		public Assignment getMappingAssignment_2_1() { return cMappingAssignment_2_1; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_2_1_0() { return cMappingMappingParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }

		//("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_3_1() { return cAnnotationAssignment_3_1; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_1_0() { return cAnnotationAnnotationParserRuleCall_3_1_0; }

		//child+=SubconceptOrAttribute*
		public Assignment getChildAssignment_3_2() { return cChildAssignment_3_2; }

		//SubconceptOrAttribute
		public RuleCall getChildSubconceptOrAttributeParserRuleCall_3_2_0() { return cChildSubconceptOrAttributeParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class TopConceptDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopConceptDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTopAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTopTopKeyword_0_0 = (Keyword)cTopAssignment_0.eContents().get(0);
		private final Assignment cNamedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNamedConceptKeyword_1_0 = (Keyword)cNamedAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMappingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMappingMappingParserRuleCall_3_1_0 = (RuleCall)cMappingAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnotationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_4_1_0 = (RuleCall)cAnnotationAssignment_4_1.eContents().get(0);
		private final Assignment cChildAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cChildSubconceptOrAttributeParserRuleCall_4_2_0 = (RuleCall)cChildAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//TopConceptDef returns ConceptDef:
		//	top?="top" named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation*
		//	child+=SubconceptOrAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//top?="top" named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation*
		//child+=SubconceptOrAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//top?="top"
		public Assignment getTopAssignment_0() { return cTopAssignment_0; }

		//"top"
		public Keyword getTopTopKeyword_0_0() { return cTopTopKeyword_0_0; }

		//named?="concept"
		public Assignment getNamedAssignment_1() { return cNamedAssignment_1; }

		//"concept"
		public Keyword getNamedConceptKeyword_1_0() { return cNamedConceptKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("<" mapping=Mapping ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//mapping=Mapping
		public Assignment getMappingAssignment_3_1() { return cMappingAssignment_3_1; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_3_1_0() { return cMappingMappingParserRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }

		//("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_4_1() { return cAnnotationAssignment_4_1; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_4_1_0() { return cAnnotationAnnotationParserRuleCall_4_1_0; }

		//child+=SubconceptOrAttribute*
		public Assignment getChildAssignment_4_2() { return cChildAssignment_4_2; }

		//SubconceptOrAttribute
		public RuleCall getChildSubconceptOrAttributeParserRuleCall_4_2_0() { return cChildSubconceptOrAttributeParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class SubconceptOrAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubconceptOrAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubconceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubconceptOrAttribute:
		//	Subconcept | Attribute;
		public ParserRule getRule() { return rule; }

		//Subconcept | Attribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//Subconcept
		public RuleCall getSubconceptParserRuleCall_0() { return cSubconceptParserRuleCall_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }
	}

	public class SubconceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subconcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCardinalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_1_0 = (RuleCall)cCardinalityAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cEssentialAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cEssentialExclamationMarkKeyword_2_0_0 = (Keyword)cEssentialAssignment_2_0.eContents().get(0);
		private final Assignment cMustBeNullAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cMustBeNullExclamationMarkExclamationMarkKeyword_2_1_0 = (Keyword)cMustBeNullAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDefAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDefNamedConceptDefParserRuleCall_3_0_1_0 = (RuleCall)cDefAssignment_3_0_1.eContents().get(0);
		private final Assignment cDefAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDefAnonymousConceptDefParserRuleCall_3_1_0 = (RuleCall)cDefAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Assignment cReferenceAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final Keyword cReferenceColonKeyword_3_2_0_0 = (Keyword)cReferenceAssignment_3_2_0.eContents().get(0);
		private final Assignment cRefAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRefConceptDefCrossReference_3_2_1_0 = (CrossReference)cRefAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRefConceptDefIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cRefConceptDefCrossReference_3_2_1_0.eContents().get(1);
		
		//Subconcept returns SubconceptOrAttribute:
		//	name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") (":" def=NamedConceptDef |
		//	def=AnonymousConceptDef | reference?=":" ref=[ConceptDef]);
		public ParserRule getRule() { return rule; }

		//name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") (":" def=NamedConceptDef | def=AnonymousConceptDef
		//| reference?=":" ref=[ConceptDef])
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//cardinality=Cardinality?
		public Assignment getCardinalityAssignment_1() { return cCardinalityAssignment_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_1_0() { return cCardinalityCardinalityParserRuleCall_1_0; }

		//essential?="!"? | mustBeNull?="!!"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//essential?="!"?
		public Assignment getEssentialAssignment_2_0() { return cEssentialAssignment_2_0; }

		//"!"
		public Keyword getEssentialExclamationMarkKeyword_2_0_0() { return cEssentialExclamationMarkKeyword_2_0_0; }

		//mustBeNull?="!!"
		public Assignment getMustBeNullAssignment_2_1() { return cMustBeNullAssignment_2_1; }

		//"!!"
		public Keyword getMustBeNullExclamationMarkExclamationMarkKeyword_2_1_0() { return cMustBeNullExclamationMarkExclamationMarkKeyword_2_1_0; }

		//":" def=NamedConceptDef | def=AnonymousConceptDef | reference?=":" ref=[ConceptDef]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//":" def=NamedConceptDef
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//def=NamedConceptDef
		public Assignment getDefAssignment_3_0_1() { return cDefAssignment_3_0_1; }

		//NamedConceptDef
		public RuleCall getDefNamedConceptDefParserRuleCall_3_0_1_0() { return cDefNamedConceptDefParserRuleCall_3_0_1_0; }

		//def=AnonymousConceptDef
		public Assignment getDefAssignment_3_1() { return cDefAssignment_3_1; }

		//AnonymousConceptDef
		public RuleCall getDefAnonymousConceptDefParserRuleCall_3_1_0() { return cDefAnonymousConceptDefParserRuleCall_3_1_0; }

		//reference?=":" ref=[ConceptDef]
		public Group getGroup_3_2() { return cGroup_3_2; }

		//reference?=":"
		public Assignment getReferenceAssignment_3_2_0() { return cReferenceAssignment_3_2_0; }

		//":"
		public Keyword getReferenceColonKeyword_3_2_0_0() { return cReferenceColonKeyword_3_2_0_0; }

		//ref=[ConceptDef]
		public Assignment getRefAssignment_3_2_1() { return cRefAssignment_3_2_1; }

		//[ConceptDef]
		public CrossReference getRefConceptDefCrossReference_3_2_1_0() { return cRefConceptDefCrossReference_3_2_1_0; }

		//ID
		public RuleCall getRefConceptDefIDTerminalRuleCall_3_2_1_0_1() { return cRefConceptDefIDTerminalRuleCall_3_2_1_0_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttribAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAttribAttribKeyword_0_0 = (Keyword)cAttribAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityCardinalityParserRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEssentialAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cEssentialExclamationMarkKeyword_3_0_0 = (Keyword)cEssentialAssignment_3_0.eContents().get(0);
		private final Assignment cMustBeNullAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cMustBeNullExclamationMarkExclamationMarkKeyword_3_1_0 = (Keyword)cMustBeNullAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttribMappingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttribMappingMappingParserRuleCall_4_1_0 = (RuleCall)cAttribMappingAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnnotationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_5_1_0 = (RuleCall)cAnnotationAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Attribute returns SubconceptOrAttribute:
		//	attrib?="attrib" name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") ("<" attribMapping=Mapping
		//	">")? ("{" annotation+=Annotation* "}")?;
		public ParserRule getRule() { return rule; }

		//attrib?="attrib" name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") ("<" attribMapping=Mapping ">")?
		//("{" annotation+=Annotation* "}")?
		public Group getGroup() { return cGroup; }

		//attrib?="attrib"
		public Assignment getAttribAssignment_0() { return cAttribAssignment_0; }

		//"attrib"
		public Keyword getAttribAttribKeyword_0_0() { return cAttribAttribKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//cardinality=Cardinality?
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }

		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_2_0() { return cCardinalityCardinalityParserRuleCall_2_0; }

		//essential?="!"? | mustBeNull?="!!"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//essential?="!"?
		public Assignment getEssentialAssignment_3_0() { return cEssentialAssignment_3_0; }

		//"!"
		public Keyword getEssentialExclamationMarkKeyword_3_0_0() { return cEssentialExclamationMarkKeyword_3_0_0; }

		//mustBeNull?="!!"
		public Assignment getMustBeNullAssignment_3_1() { return cMustBeNullAssignment_3_1; }

		//"!!"
		public Keyword getMustBeNullExclamationMarkExclamationMarkKeyword_3_1_0() { return cMustBeNullExclamationMarkExclamationMarkKeyword_3_1_0; }

		//("<" attribMapping=Mapping ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//attribMapping=Mapping
		public Assignment getAttribMappingAssignment_4_1() { return cAttribMappingAssignment_4_1; }

		//Mapping
		public RuleCall getAttribMappingMappingParserRuleCall_4_1_0() { return cAttribMappingMappingParserRuleCall_4_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_2() { return cGreaterThanSignKeyword_4_2; }

		//("{" annotation+=Annotation* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_5_1() { return cAnnotationAssignment_5_1; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_5_1_0() { return cAnnotationAnnotationParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cZeroOrMoreAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cZeroOrMoreAsteriskKeyword_0_0 = (Keyword)cZeroOrMoreAssignment_0.eContents().get(0);
		private final Assignment cOneOrMoreAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOneOrMorePlusSignKeyword_1_0 = (Keyword)cOneOrMoreAssignment_1.eContents().get(0);
		
		////AnonymousConcept:
		////	localName=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')? 
		////	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
		////	body=ConceptDefBody?;
		////Attribute:
		////	'attrib' name=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')?
		////	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?;
		////ConceptDefBody:
		////	'{' (subconcept+=Subconcept) (',' subconcept+=Subconcept)* '}';
		////ConceptRef:
		////	localName=ID cardinality=Cardinality? required?='!'? ':' name=[ConceptDef];
		//Cardinality:
		//	zeroOrMore?="*" | oneOrMore?="+";
		public ParserRule getRule() { return rule; }

		//zeroOrMore?="*" | oneOrMore?="+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//zeroOrMore?="*"
		public Assignment getZeroOrMoreAssignment_0() { return cZeroOrMoreAssignment_0; }

		//"*"
		public Keyword getZeroOrMoreAsteriskKeyword_0_0() { return cZeroOrMoreAsteriskKeyword_0_0; }

		//oneOrMore?="+"
		public Assignment getOneOrMoreAssignment_1() { return cOneOrMoreAssignment_1; }

		//"+"
		public Keyword getOneOrMorePlusSignKeyword_1_0() { return cOneOrMorePlusSignKeyword_1_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextPathExprParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingImplicitContextMappingParserRuleCall_1_0 = (RuleCall)cMappingAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBeforeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBeforeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBeforePathExprParserRuleCall_2_2_0 = (RuleCall)cBeforeAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAfterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAfterAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAfterPathExprParserRuleCall_3_2_0 = (RuleCall)cAfterAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Mapping:
		//	context=PathExpr? mapping=ImplicitContextMapping ("before" "(" before=PathExpr ")")? ("after" "(" after=PathExpr
		//	")")?;
		public ParserRule getRule() { return rule; }

		//context=PathExpr? mapping=ImplicitContextMapping ("before" "(" before=PathExpr ")")? ("after" "(" after=PathExpr ")")?
		public Group getGroup() { return cGroup; }

		//context=PathExpr?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//PathExpr
		public RuleCall getContextPathExprParserRuleCall_0_0() { return cContextPathExprParserRuleCall_0_0; }

		//mapping=ImplicitContextMapping
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }

		//ImplicitContextMapping
		public RuleCall getMappingImplicitContextMappingParserRuleCall_1_0() { return cMappingImplicitContextMappingParserRuleCall_1_0; }

		//("before" "(" before=PathExpr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"before"
		public Keyword getBeforeKeyword_2_0() { return cBeforeKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//before=PathExpr
		public Assignment getBeforeAssignment_2_2() { return cBeforeAssignment_2_2; }

		//PathExpr
		public RuleCall getBeforePathExprParserRuleCall_2_2_0() { return cBeforePathExprParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//("after" "(" after=PathExpr ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"after"
		public Keyword getAfterKeyword_3_0() { return cAfterKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//after=PathExpr
		public Assignment getAfterAssignment_3_2() { return cAfterAssignment_3_2; }

		//PathExpr
		public RuleCall getAfterPathExprParserRuleCall_3_2_0() { return cAfterPathExprParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}

	public class ImplicitContextMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicitContextMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUsesModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUsesEntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubroutineParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSubroutineNameParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cActualParamByKeywordParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cVariableDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cDeclaredEntityAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final RuleCall cDeclaredEntityParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cFunctionAssignmentParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//ImplicitContextMapping:
		//	Module | ModuleName | UsesModule | UsesEntity | Call | Subroutine | SubroutineName | ActualParamByKeyword |
		//	VariableDeclaration | {DeclaredEntity} DeclaredEntity | FunctionAssignment;
		public ParserRule getRule() { return rule; }

		//Module | ModuleName | UsesModule | UsesEntity | Call | Subroutine | SubroutineName | ActualParamByKeyword |
		//VariableDeclaration | {DeclaredEntity} DeclaredEntity | FunctionAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Module
		public RuleCall getModuleParserRuleCall_0() { return cModuleParserRuleCall_0; }

		//ModuleName
		public RuleCall getModuleNameParserRuleCall_1() { return cModuleNameParserRuleCall_1; }

		//UsesModule
		public RuleCall getUsesModuleParserRuleCall_2() { return cUsesModuleParserRuleCall_2; }

		//UsesEntity
		public RuleCall getUsesEntityParserRuleCall_3() { return cUsesEntityParserRuleCall_3; }

		//Call
		public RuleCall getCallParserRuleCall_4() { return cCallParserRuleCall_4; }

		//Subroutine
		public RuleCall getSubroutineParserRuleCall_5() { return cSubroutineParserRuleCall_5; }

		//SubroutineName
		public RuleCall getSubroutineNameParserRuleCall_6() { return cSubroutineNameParserRuleCall_6; }

		//ActualParamByKeyword
		public RuleCall getActualParamByKeywordParserRuleCall_7() { return cActualParamByKeywordParserRuleCall_7; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_8() { return cVariableDeclarationParserRuleCall_8; }

		//{DeclaredEntity} DeclaredEntity
		public Group getGroup_9() { return cGroup_9; }

		//{DeclaredEntity}
		public Action getDeclaredEntityAction_9_0() { return cDeclaredEntityAction_9_0; }

		//DeclaredEntity
		public RuleCall getDeclaredEntityParserRuleCall_9_1() { return cDeclaredEntityParserRuleCall_9_1; }

		//FunctionAssignment
		public RuleCall getFunctionAssignmentParserRuleCall_10() { return cFunctionAssignmentParserRuleCall_10; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameExprParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Module:
		//	{Module} "module" ("(" name=Expr ")")?;
		public ParserRule getRule() { return rule; }

		//{Module} "module" ("(" name=Expr ")")?
		public Group getGroup() { return cGroup; }

		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//("(" name=Expr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//name=Expr
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_1_0() { return cNameExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ModuleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModuleName:
		//	{ModuleName} "moduleName";
		public ParserRule getRule() { return rule; }

		//{ModuleName} "moduleName"
		public Group getGroup() { return cGroup; }

		//{ModuleName}
		public Action getModuleNameAction_0() { return cModuleNameAction_0; }

		//"moduleName"
		public Keyword getModuleNameKeyword_1() { return cModuleNameKeyword_1; }
	}

	public class UsesModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExprParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsesModule:
		//	"usesModule" "(" name=Expr ")";
		public ParserRule getRule() { return rule; }

		//"usesModule" "(" name=Expr ")"
		public Group getGroup() { return cGroup; }

		//"usesModule"
		public Keyword getUsesModuleKeyword_0() { return cUsesModuleKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=Expr
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_0() { return cNameExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UsesEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExprParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsesEntity:
		//	"usesEntity" "(" name=Expr ")";
		public ParserRule getRule() { return rule; }

		//"usesEntity" "(" name=Expr ")"
		public Group getGroup() { return cGroup; }

		//"usesEntity"
		public Keyword getUsesEntityKeyword_0() { return cUsesEntityKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=Expr
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_0() { return cNameExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SubroutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subroutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubroutineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExprParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsFormalParamParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsFormalParamParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subroutine:
		//	"subroutine" "(" name=Expr ("(" (params+=FormalParam ("," params+=FormalParam)*)? ")")? ")";
		public ParserRule getRule() { return rule; }

		//"subroutine" "(" name=Expr ("(" (params+=FormalParam ("," params+=FormalParam)*)? ")")? ")"
		public Group getGroup() { return cGroup; }

		//"subroutine"
		public Keyword getSubroutineKeyword_0() { return cSubroutineKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//name=Expr
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_0() { return cNameExprParserRuleCall_2_0; }

		//("(" (params+=FormalParam ("," params+=FormalParam)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=FormalParam ("," params+=FormalParam)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=FormalParam
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//FormalParam
		public RuleCall getParamsFormalParamParserRuleCall_3_1_0_0() { return cParamsFormalParamParserRuleCall_3_1_0_0; }

		//("," params+=FormalParam)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=FormalParam
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//FormalParam
		public RuleCall getParamsFormalParamParserRuleCall_3_1_1_1_0() { return cParamsFormalParamParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FormalParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntentIntentParserRuleCall_0_0 = (RuleCall)cIntentAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExprParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FormalParam:
		//	intent=Intent? type=Type name=Expr;
		public ParserRule getRule() { return rule; }

		//intent=Intent? type=Type name=Expr
		public Group getGroup() { return cGroup; }

		//intent=Intent?
		public Assignment getIntentAssignment_0() { return cIntentAssignment_0; }

		//Intent
		public RuleCall getIntentIntentParserRuleCall_0_0() { return cIntentIntentParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=Expr
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_0() { return cNameExprParserRuleCall_2_0; }
	}

	public class IntentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInAssignment_0.eContents().get(0);
		private final Assignment cOutAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutAssignment_1.eContents().get(0);
		private final Assignment cInoutAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cInoutInoutKeyword_2_0 = (Keyword)cInoutAssignment_2.eContents().get(0);
		
		//Intent:
		//	in?="in" | out?="out" | inout?="inout";
		public ParserRule getRule() { return rule; }

		//in?="in" | out?="out" | inout?="inout"
		public Alternatives getAlternatives() { return cAlternatives; }

		//in?="in"
		public Assignment getInAssignment_0() { return cInAssignment_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//out?="out"
		public Assignment getOutAssignment_1() { return cOutAssignment_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }

		//inout?="inout"
		public Assignment getInoutAssignment_2() { return cInoutAssignment_2; }

		//"inout"
		public Keyword getInoutInoutKeyword_2_0() { return cInoutInoutKeyword_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cCharacterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cCharacterCharacterKeyword_1_0 = (Keyword)cCharacterAssignment_1.eContents().get(0);
		private final Assignment cLogicalAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cLogicalLogicalKeyword_2_0 = (Keyword)cLogicalAssignment_2.eContents().get(0);
		private final Assignment cRealAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cRealRealKeyword_3_0 = (Keyword)cRealAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cDoubleAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cDoubleDoubleKeyword_4_0_0 = (Keyword)cDoubleAssignment_4_0.eContents().get(0);
		private final Keyword cPrecisionKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cDerivedAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cDerivedTypeKeyword_5_0_0 = (Keyword)cDerivedAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDerivedTypeExprParserRuleCall_5_2_0 = (RuleCall)cDerivedTypeAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Type:
		//	integer?="integer" | character?="character" | logical?="logical" | real?="real" | double?="double" "precision"? |
		//	derived?="type" "(" derivedType=Expr ")";
		public ParserRule getRule() { return rule; }

		//integer?="integer" | character?="character" | logical?="logical" | real?="real" | double?="double" "precision"? |
		//derived?="type" "(" derivedType=Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//integer?="integer"
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }

		//character?="character"
		public Assignment getCharacterAssignment_1() { return cCharacterAssignment_1; }

		//"character"
		public Keyword getCharacterCharacterKeyword_1_0() { return cCharacterCharacterKeyword_1_0; }

		//logical?="logical"
		public Assignment getLogicalAssignment_2() { return cLogicalAssignment_2; }

		//"logical"
		public Keyword getLogicalLogicalKeyword_2_0() { return cLogicalLogicalKeyword_2_0; }

		//real?="real"
		public Assignment getRealAssignment_3() { return cRealAssignment_3; }

		//"real"
		public Keyword getRealRealKeyword_3_0() { return cRealRealKeyword_3_0; }

		//double?="double" "precision"?
		public Group getGroup_4() { return cGroup_4; }

		//double?="double"
		public Assignment getDoubleAssignment_4_0() { return cDoubleAssignment_4_0; }

		//"double"
		public Keyword getDoubleDoubleKeyword_4_0_0() { return cDoubleDoubleKeyword_4_0_0; }

		//"precision"?
		public Keyword getPrecisionKeyword_4_1() { return cPrecisionKeyword_4_1; }

		//derived?="type" "(" derivedType=Expr ")"
		public Group getGroup_5() { return cGroup_5; }

		//derived?="type"
		public Assignment getDerivedAssignment_5_0() { return cDerivedAssignment_5_0; }

		//"type"
		public Keyword getDerivedTypeKeyword_5_0_0() { return cDerivedTypeKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//derivedType=Expr
		public Assignment getDerivedTypeAssignment_5_2() { return cDerivedTypeAssignment_5_2; }

		//Expr
		public RuleCall getDerivedTypeExprParserRuleCall_5_2_0() { return cDerivedTypeExprParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}

	public class SubroutineNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubroutineName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubroutineNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSubroutineNameAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameExprParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SubroutineName:
		//	"subroutineName" {SubroutineName} ("(" name=Expr ")")?;
		public ParserRule getRule() { return rule; }

		//"subroutineName" {SubroutineName} ("(" name=Expr ")")?
		public Group getGroup() { return cGroup; }

		//"subroutineName"
		public Keyword getSubroutineNameKeyword_0() { return cSubroutineNameKeyword_0; }

		//{SubroutineName}
		public Action getSubroutineNameAction_1() { return cSubroutineNameAction_1; }

		//("(" name=Expr ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//name=Expr
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Expr
		public RuleCall getNameExprParserRuleCall_2_1_0() { return cNameExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubroutineNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubroutineNameExprParserRuleCall_2_0 = (RuleCall)cSubroutineNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsActualParamParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsActualParamParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	"call" "(" subroutineName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")";
		public ParserRule getRule() { return rule; }

		//"call" "(" subroutineName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")"
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//subroutineName=Expr
		public Assignment getSubroutineNameAssignment_2() { return cSubroutineNameAssignment_2; }

		//Expr
		public RuleCall getSubroutineNameExprParserRuleCall_2_0() { return cSubroutineNameExprParserRuleCall_2_0; }

		//("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=ActualParam ("," params+=ActualParam)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=ActualParam
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_3_1_0_0() { return cParamsActualParamParserRuleCall_3_1_0_0; }

		//("," params+=ActualParam)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=ActualParam
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_3_1_1_1_0() { return cParamsActualParamParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ActualParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeywordIDTerminalRuleCall_0_0_0 = (RuleCall)cKeywordAssignment_0_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ActualParam:
		//	(keyword=ID optional?="?"? "=")? value=Expr;
		public ParserRule getRule() { return rule; }

		//(keyword=ID optional?="?"? "=")? value=Expr
		public Group getGroup() { return cGroup; }

		//(keyword=ID optional?="?"? "=")?
		public Group getGroup_0() { return cGroup_0; }

		//keyword=ID
		public Assignment getKeywordAssignment_0_0() { return cKeywordAssignment_0_0; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_0_0_0() { return cKeywordIDTerminalRuleCall_0_0_0; }

		//optional?="?"?
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_0_1_0() { return cOptionalQuestionMarkKeyword_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//value=Expr
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_0() { return cValueExprParserRuleCall_1_0; }
	}

	public class ActualParamByKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualParamByKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActualParamByKeywordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeywordIDTerminalRuleCall_2_0 = (RuleCall)cKeywordAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActualParamByKeyword:
		//	"actualParamByKeyword" "(" keyword=ID ")";
		public ParserRule getRule() { return rule; }

		//"actualParamByKeyword" "(" keyword=ID ")"
		public Group getGroup() { return cGroup; }

		//"actualParamByKeyword"
		public Keyword getActualParamByKeywordKeyword_0() { return cActualParamByKeywordKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//keyword=ID
		public Assignment getKeywordAssignment_2() { return cKeywordAssignment_2; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_2_0() { return cKeywordIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclarationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableDeclaration:
		//	"declaration" "(" type=Type ")";
		public ParserRule getRule() { return rule; }

		//"declaration" "(" type=Type ")"
		public Group getGroup() { return cGroup; }

		//"declaration"
		public Keyword getDeclarationKeyword_0() { return cDeclarationKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DeclaredEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredEntity");
		private final Keyword cDeclaredEntityKeyword = (Keyword)rule.eContents().get(1);
		
		//DeclaredEntity:
		//	"declaredEntity";
		public ParserRule getRule() { return rule; }

		//"declaredEntity"
		public Keyword getDeclaredEntityKeyword() { return cDeclaredEntityKeyword; }
	}

	public class FunctionAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionAssignmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLhsExprParserRuleCall_2_0 = (RuleCall)cLhsAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionNameExprParserRuleCall_4_0 = (RuleCall)cFunctionNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cParamsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParamsActualParamParserRuleCall_5_1_0_0 = (RuleCall)cParamsAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParamsActualParamParserRuleCall_5_1_1_1_0 = (RuleCall)cParamsAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FunctionAssignment:
		//	"functionAssignment" "(" lhs=Expr "," functionName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")?
		//	")";
		public ParserRule getRule() { return rule; }

		//"functionAssignment" "(" lhs=Expr "," functionName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")"
		public Group getGroup() { return cGroup; }

		//"functionAssignment"
		public Keyword getFunctionAssignmentKeyword_0() { return cFunctionAssignmentKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//lhs=Expr
		public Assignment getLhsAssignment_2() { return cLhsAssignment_2; }

		//Expr
		public RuleCall getLhsExprParserRuleCall_2_0() { return cLhsExprParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//functionName=Expr
		public Assignment getFunctionNameAssignment_4() { return cFunctionNameAssignment_4; }

		//Expr
		public RuleCall getFunctionNameExprParserRuleCall_4_0() { return cFunctionNameExprParserRuleCall_4_0; }

		//("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//(params+=ActualParam ("," params+=ActualParam)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//params+=ActualParam
		public Assignment getParamsAssignment_5_1_0() { return cParamsAssignment_5_1_0; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_5_1_0_0() { return cParamsActualParamParserRuleCall_5_1_0_0; }

		//("," params+=ActualParam)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//params+=ActualParam
		public Assignment getParamsAssignment_5_1_1_1() { return cParamsAssignment_5_1_1_1; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_5_1_1_1_0() { return cParamsActualParamParserRuleCall_5_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class LocalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		
		////RightHandSideFunctionRef:
		////	'rhsFunctionRef';
		//LocalExpression:
		//	id=ID | literal=Literal;
		public ParserRule getRule() { return rule; }

		//id=ID | literal=Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0() { return cLiteralLiteralParserRuleCall_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWildcardAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cWildcardAsteriskKeyword_0_0 = (Keyword)cWildcardAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprLocalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cPathExprAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPathExprPathExprParserRuleCall_2_0 = (RuleCall)cPathExprAssignment_2.eContents().get(0);
		
		////IDOrPathExpr:
		////	idOrWildcard=IDOrWildcard | pathExpr=PathExpr;
		////three basic cases: 
		//// - a wildcard, 
		//// - a local expression in the target domain, 
		//// - or a path expression in the FSML domain	
		////IDOrPathExpr:
		//Expr:
		//	wildcard?="*" | expr=LocalExpression | pathExpr=PathExpr;
		public ParserRule getRule() { return rule; }

		//wildcard?="*" | expr=LocalExpression | pathExpr=PathExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_0() { return cWildcardAssignment_0; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_0_0() { return cWildcardAsteriskKeyword_0_0; }

		//expr=LocalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//LocalExpression
		public RuleCall getExprLocalExpressionParserRuleCall_1_0() { return cExprLocalExpressionParserRuleCall_1_0; }

		//pathExpr=PathExpr
		public Assignment getPathExprAssignment_2() { return cPathExprAssignment_2; }

		//PathExpr
		public RuleCall getPathExprPathExprParserRuleCall_2_0() { return cPathExprPathExprParserRuleCall_2_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	INT+ | STRING;
		public ParserRule getRule() { return rule; }

		//INT+ | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT+
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class PathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathExprNodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////PathExpr:
		////	'#' segments+=PathSegment ('/' segments+=PathSegment)*;
		//PathExpr:
		//	"#" PathExprNode;
		public ParserRule getRule() { return rule; }

		//"#" PathExprNode
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//PathExprNode
		public RuleCall getPathExprNodeParserRuleCall_1() { return cPathExprNodeParserRuleCall_1; }
	}

	public class PathExprNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExprNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathExprTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPathExprHeadAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailSubconceptOrAttributeCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailSubconceptOrAttributeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailSubconceptOrAttributeCrossReference_1_2_0.eContents().get(1);
		
		////PathExprNode returns PathExpr:
		////	PathExprTerm ({PathExpr.head=current} '/' tail=PathExprNode)?;
		////PathExprTerm returns PathExpr:
		////	{PathExprTerm} ref=[SubconceptOrAttribute] (guard?='['']')?;
		//PathExprNode returns PathExpr:
		//	PathExprTerm ({PathExpr.head=current} "/" tail=[SubconceptOrAttribute])*;
		public ParserRule getRule() { return rule; }

		//PathExprTerm ({PathExpr.head=current} "/" tail=[SubconceptOrAttribute])*
		public Group getGroup() { return cGroup; }

		//PathExprTerm
		public RuleCall getPathExprTermParserRuleCall_0() { return cPathExprTermParserRuleCall_0; }

		//({PathExpr.head=current} "/" tail=[SubconceptOrAttribute])*
		public Group getGroup_1() { return cGroup_1; }

		//{PathExpr.head=current}
		public Action getPathExprHeadAction_1_0() { return cPathExprHeadAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//tail=[SubconceptOrAttribute]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }

		//[SubconceptOrAttribute]
		public CrossReference getTailSubconceptOrAttributeCrossReference_1_2_0() { return cTailSubconceptOrAttributeCrossReference_1_2_0; }

		//ID
		public RuleCall getTailSubconceptOrAttributeIDTerminalRuleCall_1_2_0_1() { return cTailSubconceptOrAttributeIDTerminalRuleCall_1_2_0_1; }
	}

	public class PathExprTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExprTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathExprTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAxisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_1_0 = (RuleCall)cAxisAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefSubconceptOrAttributeCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefSubconceptOrAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cRefSubconceptOrAttributeCrossReference_2_0.eContents().get(1);
		
		//PathExprTerm returns PathExpr:
		//	{PathExprTerm} axis=Axis? ref=[SubconceptOrAttribute];
		public ParserRule getRule() { return rule; }

		//{PathExprTerm} axis=Axis? ref=[SubconceptOrAttribute]
		public Group getGroup() { return cGroup; }

		//{PathExprTerm}
		public Action getPathExprTermAction_0() { return cPathExprTermAction_0; }

		//axis=Axis?
		public Assignment getAxisAssignment_1() { return cAxisAssignment_1; }

		//Axis
		public RuleCall getAxisAxisParserRuleCall_1_0() { return cAxisAxisParserRuleCall_1_0; }

		//ref=[SubconceptOrAttribute]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[SubconceptOrAttribute]
		public CrossReference getRefSubconceptOrAttributeCrossReference_2_0() { return cRefSubconceptOrAttributeCrossReference_2_0; }

		//ID
		public RuleCall getRefSubconceptOrAttributeIDTerminalRuleCall_2_0_1() { return cRefSubconceptOrAttributeIDTerminalRuleCall_2_0_1; }
	}

	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axis");
		private final Assignment cAncestorAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAncestorCircumflexAccentKeyword_0 = (Keyword)cAncestorAssignment.eContents().get(0);
		
		////parent?='..'
		//Axis:
		//	ancestor?="^";
		public ParserRule getRule() { return rule; }

		//ancestor?="^"
		public Assignment getAncestorAssignment() { return cAncestorAssignment; }

		//"^"
		public Keyword getAncestorCircumflexAccentKeyword_0() { return cAncestorCircumflexAccentKeyword_0; }
	}
	
	
	private LanguageElements pLanguage;
	private AnnotationElements pAnnotation;
	private AnonymousConceptDefElements pAnonymousConceptDef;
	private NamedConceptDefElements pNamedConceptDef;
	private TopConceptDefElements pTopConceptDef;
	private SubconceptOrAttributeElements pSubconceptOrAttribute;
	private SubconceptElements pSubconcept;
	private AttributeElements pAttribute;
	private TerminalRule tANNOTATION_ID;
	private CardinalityElements pCardinality;
	private MappingElements pMapping;
	private ImplicitContextMappingElements pImplicitContextMapping;
	private ModuleElements pModule;
	private ModuleNameElements pModuleName;
	private UsesModuleElements pUsesModule;
	private UsesEntityElements pUsesEntity;
	private SubroutineElements pSubroutine;
	private FormalParamElements pFormalParam;
	private IntentElements pIntent;
	private TypeElements pType;
	private SubroutineNameElements pSubroutineName;
	private CallElements pCall;
	private ActualParamElements pActualParam;
	private ActualParamByKeywordElements pActualParamByKeyword;
	private VariableDeclarationElements pVariableDeclaration;
	private DeclaredEntityElements pDeclaredEntity;
	private FunctionAssignmentElements pFunctionAssignment;
	private LocalExpressionElements pLocalExpression;
	private ExprElements pExpr;
	private LiteralElements pLiteral;
	private PathExprElements pPathExpr;
	private PathExprNodeElements pPathExprNode;
	private PathExprTermElements pPathExprTerm;
	private AxisElements pAxis;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CupidLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.earthsystemcurator.CupidLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Language:
	//	"language " name=ID uri=STRING "{" conceptDef+=TopConceptDef conceptDef+=NamedConceptDef* "}";
	public LanguageElements getLanguageAccess() {
		return (pLanguage != null) ? pLanguage : (pLanguage = new LanguageElements());
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	////Subconcept:
	////	AnonymousConcept | ConceptRef | Attribute;
	////Subconcept:
	////	attrib?='attrib'? name=ID cardinality=Cardinality? essential?='!'?
	////	(
	////		ref?=':' conceptDef=[ConceptDef] |
	////		('<' mapping=Mapping '>')? ('[' annotation+=Annotation (',' annotation+=Annotation)* ']')? body=ConceptDefBody?	
	////	);
	//Annotation:
	//	key=ANNOTATION_ID ("=" value=STRING)?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	////ConceptDef:
	////	(top?='/top'? named?='concept' name=ID)? ('<' mapping=Mapping '>')? 
	////		('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
	////		('{' localName=ID '}')?;
	////ConceptDef:
	////	AnonymousConceptDef | NamedConceptDef;
	//AnonymousConceptDef returns ConceptDef:
	//	{ConceptDef} ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?;
	public AnonymousConceptDefElements getAnonymousConceptDefAccess() {
		return (pAnonymousConceptDef != null) ? pAnonymousConceptDef : (pAnonymousConceptDef = new AnonymousConceptDefElements());
	}
	
	public ParserRule getAnonymousConceptDefRule() {
		return getAnonymousConceptDefAccess().getRule();
	}

	//NamedConceptDef returns ConceptDef:
	//	named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation* child+=SubconceptOrAttribute* "}")?;
	public NamedConceptDefElements getNamedConceptDefAccess() {
		return (pNamedConceptDef != null) ? pNamedConceptDef : (pNamedConceptDef = new NamedConceptDefElements());
	}
	
	public ParserRule getNamedConceptDefRule() {
		return getNamedConceptDefAccess().getRule();
	}

	//TopConceptDef returns ConceptDef:
	//	top?="top" named?="concept" name=ID ("<" mapping=Mapping ">")? ("{" annotation+=Annotation*
	//	child+=SubconceptOrAttribute* "}")?;
	public TopConceptDefElements getTopConceptDefAccess() {
		return (pTopConceptDef != null) ? pTopConceptDef : (pTopConceptDef = new TopConceptDefElements());
	}
	
	public ParserRule getTopConceptDefRule() {
		return getTopConceptDefAccess().getRule();
	}

	//SubconceptOrAttribute:
	//	Subconcept | Attribute;
	public SubconceptOrAttributeElements getSubconceptOrAttributeAccess() {
		return (pSubconceptOrAttribute != null) ? pSubconceptOrAttribute : (pSubconceptOrAttribute = new SubconceptOrAttributeElements());
	}
	
	public ParserRule getSubconceptOrAttributeRule() {
		return getSubconceptOrAttributeAccess().getRule();
	}

	//Subconcept returns SubconceptOrAttribute:
	//	name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") (":" def=NamedConceptDef |
	//	def=AnonymousConceptDef | reference?=":" ref=[ConceptDef]);
	public SubconceptElements getSubconceptAccess() {
		return (pSubconcept != null) ? pSubconcept : (pSubconcept = new SubconceptElements());
	}
	
	public ParserRule getSubconceptRule() {
		return getSubconceptAccess().getRule();
	}

	//Attribute returns SubconceptOrAttribute:
	//	attrib?="attrib" name=ID cardinality=Cardinality? (essential?="!"? | mustBeNull?="!!") ("<" attribMapping=Mapping
	//	">")? ("{" annotation+=Annotation* "}")?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	////AnnotationID: '@' ID;
	//terminal ANNOTATION_ID:
	//	"@" ID;
	public TerminalRule getANNOTATION_IDRule() {
		return (tANNOTATION_ID != null) ? tANNOTATION_ID : (tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANNOTATION_ID"));
	} 

	////AnonymousConcept:
	////	localName=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')? 
	////	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
	////	body=ConceptDefBody?;
	////Attribute:
	////	'attrib' name=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')?
	////	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?;
	////ConceptDefBody:
	////	'{' (subconcept+=Subconcept) (',' subconcept+=Subconcept)* '}';
	////ConceptRef:
	////	localName=ID cardinality=Cardinality? required?='!'? ':' name=[ConceptDef];
	//Cardinality:
	//	zeroOrMore?="*" | oneOrMore?="+";
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//Mapping:
	//	context=PathExpr? mapping=ImplicitContextMapping ("before" "(" before=PathExpr ")")? ("after" "(" after=PathExpr
	//	")")?;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//ImplicitContextMapping:
	//	Module | ModuleName | UsesModule | UsesEntity | Call | Subroutine | SubroutineName | ActualParamByKeyword |
	//	VariableDeclaration | {DeclaredEntity} DeclaredEntity | FunctionAssignment;
	public ImplicitContextMappingElements getImplicitContextMappingAccess() {
		return (pImplicitContextMapping != null) ? pImplicitContextMapping : (pImplicitContextMapping = new ImplicitContextMappingElements());
	}
	
	public ParserRule getImplicitContextMappingRule() {
		return getImplicitContextMappingAccess().getRule();
	}

	//Module:
	//	{Module} "module" ("(" name=Expr ")")?;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ModuleName:
	//	{ModuleName} "moduleName";
	public ModuleNameElements getModuleNameAccess() {
		return (pModuleName != null) ? pModuleName : (pModuleName = new ModuleNameElements());
	}
	
	public ParserRule getModuleNameRule() {
		return getModuleNameAccess().getRule();
	}

	//UsesModule:
	//	"usesModule" "(" name=Expr ")";
	public UsesModuleElements getUsesModuleAccess() {
		return (pUsesModule != null) ? pUsesModule : (pUsesModule = new UsesModuleElements());
	}
	
	public ParserRule getUsesModuleRule() {
		return getUsesModuleAccess().getRule();
	}

	//UsesEntity:
	//	"usesEntity" "(" name=Expr ")";
	public UsesEntityElements getUsesEntityAccess() {
		return (pUsesEntity != null) ? pUsesEntity : (pUsesEntity = new UsesEntityElements());
	}
	
	public ParserRule getUsesEntityRule() {
		return getUsesEntityAccess().getRule();
	}

	//Subroutine:
	//	"subroutine" "(" name=Expr ("(" (params+=FormalParam ("," params+=FormalParam)*)? ")")? ")";
	public SubroutineElements getSubroutineAccess() {
		return (pSubroutine != null) ? pSubroutine : (pSubroutine = new SubroutineElements());
	}
	
	public ParserRule getSubroutineRule() {
		return getSubroutineAccess().getRule();
	}

	//FormalParam:
	//	intent=Intent? type=Type name=Expr;
	public FormalParamElements getFormalParamAccess() {
		return (pFormalParam != null) ? pFormalParam : (pFormalParam = new FormalParamElements());
	}
	
	public ParserRule getFormalParamRule() {
		return getFormalParamAccess().getRule();
	}

	//Intent:
	//	in?="in" | out?="out" | inout?="inout";
	public IntentElements getIntentAccess() {
		return (pIntent != null) ? pIntent : (pIntent = new IntentElements());
	}
	
	public ParserRule getIntentRule() {
		return getIntentAccess().getRule();
	}

	//Type:
	//	integer?="integer" | character?="character" | logical?="logical" | real?="real" | double?="double" "precision"? |
	//	derived?="type" "(" derivedType=Expr ")";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SubroutineName:
	//	"subroutineName" {SubroutineName} ("(" name=Expr ")")?;
	public SubroutineNameElements getSubroutineNameAccess() {
		return (pSubroutineName != null) ? pSubroutineName : (pSubroutineName = new SubroutineNameElements());
	}
	
	public ParserRule getSubroutineNameRule() {
		return getSubroutineNameAccess().getRule();
	}

	//Call:
	//	"call" "(" subroutineName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")";
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ActualParam:
	//	(keyword=ID optional?="?"? "=")? value=Expr;
	public ActualParamElements getActualParamAccess() {
		return (pActualParam != null) ? pActualParam : (pActualParam = new ActualParamElements());
	}
	
	public ParserRule getActualParamRule() {
		return getActualParamAccess().getRule();
	}

	//ActualParamByKeyword:
	//	"actualParamByKeyword" "(" keyword=ID ")";
	public ActualParamByKeywordElements getActualParamByKeywordAccess() {
		return (pActualParamByKeyword != null) ? pActualParamByKeyword : (pActualParamByKeyword = new ActualParamByKeywordElements());
	}
	
	public ParserRule getActualParamByKeywordRule() {
		return getActualParamByKeywordAccess().getRule();
	}

	//VariableDeclaration:
	//	"declaration" "(" type=Type ")";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//DeclaredEntity:
	//	"declaredEntity";
	public DeclaredEntityElements getDeclaredEntityAccess() {
		return (pDeclaredEntity != null) ? pDeclaredEntity : (pDeclaredEntity = new DeclaredEntityElements());
	}
	
	public ParserRule getDeclaredEntityRule() {
		return getDeclaredEntityAccess().getRule();
	}

	//FunctionAssignment:
	//	"functionAssignment" "(" lhs=Expr "," functionName=Expr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")?
	//	")";
	public FunctionAssignmentElements getFunctionAssignmentAccess() {
		return (pFunctionAssignment != null) ? pFunctionAssignment : (pFunctionAssignment = new FunctionAssignmentElements());
	}
	
	public ParserRule getFunctionAssignmentRule() {
		return getFunctionAssignmentAccess().getRule();
	}

	////RightHandSideFunctionRef:
	////	'rhsFunctionRef';
	//LocalExpression:
	//	id=ID | literal=Literal;
	public LocalExpressionElements getLocalExpressionAccess() {
		return (pLocalExpression != null) ? pLocalExpression : (pLocalExpression = new LocalExpressionElements());
	}
	
	public ParserRule getLocalExpressionRule() {
		return getLocalExpressionAccess().getRule();
	}

	////IDOrPathExpr:
	////	idOrWildcard=IDOrWildcard | pathExpr=PathExpr;
	////three basic cases: 
	//// - a wildcard, 
	//// - a local expression in the target domain, 
	//// - or a path expression in the FSML domain	
	////IDOrPathExpr:
	//Expr:
	//	wildcard?="*" | expr=LocalExpression | pathExpr=PathExpr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Literal:
	//	INT+ | STRING;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	////PathExpr:
	////	'#' segments+=PathSegment ('/' segments+=PathSegment)*;
	//PathExpr:
	//	"#" PathExprNode;
	public PathExprElements getPathExprAccess() {
		return (pPathExpr != null) ? pPathExpr : (pPathExpr = new PathExprElements());
	}
	
	public ParserRule getPathExprRule() {
		return getPathExprAccess().getRule();
	}

	////PathExprNode returns PathExpr:
	////	PathExprTerm ({PathExpr.head=current} '/' tail=PathExprNode)?;
	////PathExprTerm returns PathExpr:
	////	{PathExprTerm} ref=[SubconceptOrAttribute] (guard?='['']')?;
	//PathExprNode returns PathExpr:
	//	PathExprTerm ({PathExpr.head=current} "/" tail=[SubconceptOrAttribute])*;
	public PathExprNodeElements getPathExprNodeAccess() {
		return (pPathExprNode != null) ? pPathExprNode : (pPathExprNode = new PathExprNodeElements());
	}
	
	public ParserRule getPathExprNodeRule() {
		return getPathExprNodeAccess().getRule();
	}

	//PathExprTerm returns PathExpr:
	//	{PathExprTerm} axis=Axis? ref=[SubconceptOrAttribute];
	public PathExprTermElements getPathExprTermAccess() {
		return (pPathExprTerm != null) ? pPathExprTerm : (pPathExprTerm = new PathExprTermElements());
	}
	
	public ParserRule getPathExprTermRule() {
		return getPathExprTermAccess().getRule();
	}

	////parent?='..'
	//Axis:
	//	ancestor?="^";
	public AxisElements getAxisAccess() {
		return (pAxis != null) ? pAxis : (pAxis = new AxisElements());
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}

	////PathSegment:
	////	'..' | ID;
	////PathExpr returns Ref:
	////   EntityRef ({PathExpr.ref=current}  "." tail=ID)*
	////;
	////EntityRef returns Ref:
	////   {EntityRef} entity=[SubconceptOrAttribute]
	////; 
	////override	
	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	////override
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
