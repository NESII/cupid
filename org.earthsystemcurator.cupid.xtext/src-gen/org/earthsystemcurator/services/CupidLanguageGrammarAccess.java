/*
* generated by Xtext
*/
package org.earthsystemcurator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CupidLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mappings");
		private final Assignment cMappingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_0 = (RuleCall)cMappingsAssignment.eContents().get(0);
		
		////#../../implementsSetServices call: "ESMF_MethodAdd(#ignore, index?=#index, label=#name, userRoutine=#../implementsSubroutine/name, rc=#ignore)"
		//Mappings:
		//	mappings+=Mapping*;
		public ParserRule getRule() { return rule; }

		//mappings+=Mapping*
		public Assignment getMappingsAssignment() { return cMappingsAssignment; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_0() { return cMappingsMappingParserRuleCall_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextPathExprParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingImplicitContextMappingParserRuleCall_1_0 = (RuleCall)cMappingAssignment_1.eContents().get(0);
		
		//Mapping:
		//	context=PathExpr? mapping=ImplicitContextMapping;
		public ParserRule getRule() { return rule; }

		//context=PathExpr? mapping=ImplicitContextMapping
		public Group getGroup() { return cGroup; }

		//context=PathExpr?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//PathExpr
		public RuleCall getContextPathExprParserRuleCall_0_0() { return cContextPathExprParserRuleCall_0_0; }

		//mapping=ImplicitContextMapping
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }

		//ImplicitContextMapping
		public RuleCall getMappingImplicitContextMappingParserRuleCall_1_0() { return cMappingImplicitContextMappingParserRuleCall_1_0; }
	}

	public class ImplicitContextMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicitContextMapping");
		private final RuleCall cCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImplicitContextMapping:
		//	Call;
		public ParserRule getRule() { return rule; }

		//Call
		public RuleCall getCallParserRuleCall() { return cCallParserRuleCall; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubroutineNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubroutineNameIDOrPathExprParserRuleCall_2_0 = (RuleCall)cSubroutineNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsActualParamParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsActualParamParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	"call" "(" subroutineName=IDOrPathExpr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")";
		public ParserRule getRule() { return rule; }

		//"call" "(" subroutineName=IDOrPathExpr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")"
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//subroutineName=IDOrPathExpr
		public Assignment getSubroutineNameAssignment_2() { return cSubroutineNameAssignment_2; }

		//IDOrPathExpr
		public RuleCall getSubroutineNameIDOrPathExprParserRuleCall_2_0() { return cSubroutineNameIDOrPathExprParserRuleCall_2_0; }

		//("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=ActualParam ("," params+=ActualParam)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=ActualParam
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_3_1_0_0() { return cParamsActualParamParserRuleCall_3_1_0_0; }

		//("," params+=ActualParam)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=ActualParam
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//ActualParam
		public RuleCall getParamsActualParamParserRuleCall_3_1_1_1_0() { return cParamsActualParamParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ActualParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeywordIDTerminalRuleCall_0_0_0 = (RuleCall)cKeywordAssignment_0_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDOrPathExprParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ActualParam:
		//	(keyword=ID optional?="?"? "=")? value=IDOrPathExpr;
		public ParserRule getRule() { return rule; }

		//(keyword=ID optional?="?"? "=")? value=IDOrPathExpr
		public Group getGroup() { return cGroup; }

		//(keyword=ID optional?="?"? "=")?
		public Group getGroup_0() { return cGroup_0; }

		//keyword=ID
		public Assignment getKeywordAssignment_0_0() { return cKeywordAssignment_0_0; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_0_0_0() { return cKeywordIDTerminalRuleCall_0_0_0; }

		//optional?="?"?
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_0_1_0() { return cOptionalQuestionMarkKeyword_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//value=IDOrPathExpr
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IDOrPathExpr
		public RuleCall getValueIDOrPathExprParserRuleCall_1_0() { return cValueIDOrPathExprParserRuleCall_1_0; }
	}

	public class IDOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDOrWildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cWildcardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cWildcardAsteriskKeyword_1_0 = (Keyword)cWildcardAssignment_1.eContents().get(0);
		
		//IDOrWildcard:
		//	id=ID | wildcard?="*";
		public ParserRule getRule() { return rule; }

		//id=ID | wildcard?="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_1() { return cWildcardAssignment_1; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_1_0() { return cWildcardAsteriskKeyword_1_0; }
	}

	public class IDOrPathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDOrPathExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDOrWildcardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPathExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////IDOrPathExpr:
		////	idOrWildcard=IDOrWildcard | pathExpr=PathExpr;
		//IDOrPathExpr:
		//	IDOrWildcard | PathExpr;
		public ParserRule getRule() { return rule; }

		//IDOrWildcard | PathExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDOrWildcard
		public RuleCall getIDOrWildcardParserRuleCall_0() { return cIDOrWildcardParserRuleCall_0; }

		//PathExpr
		public RuleCall getPathExprParserRuleCall_1() { return cPathExprParserRuleCall_1; }
	}

	public class PathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSegmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSegmentsPathSegmentParserRuleCall_1_0 = (RuleCall)cSegmentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSegmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSegmentsPathSegmentParserRuleCall_2_1_0 = (RuleCall)cSegmentsAssignment_2_1.eContents().get(0);
		
		//PathExpr:
		//	"#" segments+=PathSegment ("/" segments+=PathSegment)*;
		public ParserRule getRule() { return rule; }

		//"#" segments+=PathSegment ("/" segments+=PathSegment)*
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//segments+=PathSegment
		public Assignment getSegmentsAssignment_1() { return cSegmentsAssignment_1; }

		//PathSegment
		public RuleCall getSegmentsPathSegmentParserRuleCall_1_0() { return cSegmentsPathSegmentParserRuleCall_1_0; }

		//("/" segments+=PathSegment)*
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//segments+=PathSegment
		public Assignment getSegmentsAssignment_2_1() { return cSegmentsAssignment_2_1; }

		//PathSegment
		public RuleCall getSegmentsPathSegmentParserRuleCall_2_1_0() { return cSegmentsPathSegmentParserRuleCall_2_1_0; }
	}

	public class PathSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathSegment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PathSegment:
		//	".." | ID;
		public ParserRule getRule() { return rule; }

		//".." | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//".."
		public Keyword getFullStopFullStopKeyword_0() { return cFullStopFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private MappingsElements pMappings;
	private MappingElements pMapping;
	private ImplicitContextMappingElements pImplicitContextMapping;
	private CallElements pCall;
	private ActualParamElements pActualParam;
	private IDOrWildcardElements pIDOrWildcard;
	private IDOrPathExprElements pIDOrPathExpr;
	private PathExprElements pPathExpr;
	private PathSegmentElements pPathSegment;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CupidLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.earthsystemcurator.CupidLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////#../../implementsSetServices call: "ESMF_MethodAdd(#ignore, index?=#index, label=#name, userRoutine=#../implementsSubroutine/name, rc=#ignore)"
	//Mappings:
	//	mappings+=Mapping*;
	public MappingsElements getMappingsAccess() {
		return (pMappings != null) ? pMappings : (pMappings = new MappingsElements());
	}
	
	public ParserRule getMappingsRule() {
		return getMappingsAccess().getRule();
	}

	//Mapping:
	//	context=PathExpr? mapping=ImplicitContextMapping;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//ImplicitContextMapping:
	//	Call;
	public ImplicitContextMappingElements getImplicitContextMappingAccess() {
		return (pImplicitContextMapping != null) ? pImplicitContextMapping : (pImplicitContextMapping = new ImplicitContextMappingElements());
	}
	
	public ParserRule getImplicitContextMappingRule() {
		return getImplicitContextMappingAccess().getRule();
	}

	//Call:
	//	"call" "(" subroutineName=IDOrPathExpr ("(" (params+=ActualParam ("," params+=ActualParam)*)? ")")? ")";
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ActualParam:
	//	(keyword=ID optional?="?"? "=")? value=IDOrPathExpr;
	public ActualParamElements getActualParamAccess() {
		return (pActualParam != null) ? pActualParam : (pActualParam = new ActualParamElements());
	}
	
	public ParserRule getActualParamRule() {
		return getActualParamAccess().getRule();
	}

	//IDOrWildcard:
	//	id=ID | wildcard?="*";
	public IDOrWildcardElements getIDOrWildcardAccess() {
		return (pIDOrWildcard != null) ? pIDOrWildcard : (pIDOrWildcard = new IDOrWildcardElements());
	}
	
	public ParserRule getIDOrWildcardRule() {
		return getIDOrWildcardAccess().getRule();
	}

	////IDOrPathExpr:
	////	idOrWildcard=IDOrWildcard | pathExpr=PathExpr;
	//IDOrPathExpr:
	//	IDOrWildcard | PathExpr;
	public IDOrPathExprElements getIDOrPathExprAccess() {
		return (pIDOrPathExpr != null) ? pIDOrPathExpr : (pIDOrPathExpr = new IDOrPathExprElements());
	}
	
	public ParserRule getIDOrPathExprRule() {
		return getIDOrPathExprAccess().getRule();
	}

	//PathExpr:
	//	"#" segments+=PathSegment ("/" segments+=PathSegment)*;
	public PathExprElements getPathExprAccess() {
		return (pPathExpr != null) ? pPathExpr : (pPathExpr = new PathExprElements());
	}
	
	public ParserRule getPathExprRule() {
		return getPathExprAccess().getRule();
	}

	//PathSegment:
	//	".." | ID;
	public PathSegmentElements getPathSegmentAccess() {
		return (pPathSegment != null) ? pPathSegment : (pPathSegment = new PathSegmentElements());
	}
	
	public ParserRule getPathSegmentRule() {
		return getPathSegmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
