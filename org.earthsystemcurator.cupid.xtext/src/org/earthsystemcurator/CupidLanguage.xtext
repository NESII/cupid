grammar org.earthsystemcurator.CupidLanguage with org.eclipse.xtext.common.Terminals

generate cupidLanguage "http://www.earthsystemcurator.org/CupidLanguage"

//Mappings:
//	mappings+=Mapping*
//	language+=Language?;

Language:
	'language ' name=ID uri=STRING '{' conceptDef+=ConceptDef+ '}';

//Subconcept:
//	AnonymousConcept | ConceptRef | Attribute;
	
Subconcept:
	attrib?='attrib'? name=ID cardinality=Cardinality? essential?='!'?
	(
		ref?=':' conceptDef=[ConceptDef] |
		('<' mapping=Mapping '>')? ('[' annotation+=Annotation (',' annotation+=Annotation)* ']')? body=ConceptDefBody?	
	);

Annotation:
	key=ID '=' value=STRING;

ConceptDef:
	top?='top'? 'concept' name=ID ('<' mapping=Mapping '>')? 
		('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
		body=ConceptDefBody?;

//AnonymousConcept:
//	localName=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')? 
//	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?
//	body=ConceptDefBody?;

//Attribute:
//	'attrib' name=ID cardinality=Cardinality? required?='!'? ('<' mapping=Mapping '>')?
//	('[' annotation+=Annotation (',' annotation+=Annotation)* ']')?;

ConceptDefBody:
	'{' (subconcept+=Subconcept) (',' subconcept+=Subconcept)* '}';

//ConceptRef:
//	localName=ID cardinality=Cardinality? required?='!'? ':' name=[ConceptDef];
	
Cardinality:
	zeroOrMore?='*' |
	oneOrMore?='+';
	

Mapping:
	context=PathExpr? mapping=ImplicitContextMapping;

ImplicitContextMapping:
	Module | ModuleName | UsesModule | UsesEntity | Call | Subroutine | SubroutineName;

Module: {Module} 
	'module' ('(' name=IDOrPathExpr ')')?;
	
ModuleName: {ModuleName}
	'moduleName';
	
UsesModule:
	'usesModule' '(' name=IDOrPathExpr ')';
	
UsesEntity:
	'usesEntity' '(' name=IDOrPathExpr ')';

Subroutine:
	'subroutine' '(' name=IDOrPathExpr ('(' (params+=FormalParam (',' params+=FormalParam)* )? ')')? ')';
	
FormalParam:
	intent=Intent? type=Type name=IDOrPathExpr;

Intent:
	in?='in' | out?='out' | inout?='inout';

Type:
	integer?='integer' | 
	character?='character' | 
	logical?='logical' | 
	real?='real' |
	double?='double' ('precision')? |
	derived?='type' '(' derivedType=IDOrPathExpr ')';

SubroutineName:
	'subroutineName' {SubroutineName} ('(' name=IDOrPathExpr ')')?;

Call:
	'call' '(' subroutineName=IDOrPathExpr ( '(' (params+=ActualParam (',' params+=ActualParam)* )? ')')? ')';

ActualParam:
	(keyword=ID (optional?='?')? '=')? value=IDOrPathExpr;

IDOrWildcard:
	id=ID | wildcard?='*';
	
//IDOrPathExpr:
//	idOrWildcard=IDOrWildcard | pathExpr=PathExpr;
	
IDOrPathExpr:
	IDOrWildcard | PathExpr;

PathExpr:
	'#' segments+=PathSegment ('/' segments+=PathSegment)*;
	
PathSegment:
	'..' | ID;
	

	
	
