language NUOPC {
	
	top concept NUOPCApplication 
	{
		 models*:NUOPCModel
		 //drivers*:NUOPCDriver
	}
	
	concept SetServices <subroutine(#name(inout type(ESMF_GridComp) #gcomp, out integer #rc) )> 
	{
		attrib name,
		attrib gcomp,
		attrib rc
	}
	
	/*		
	concept NUOPCDriver <module>
	{
		implementsSetServices:SetServices
	}
	*/
	
	concept NUOPCModel <module>
	[
		label="NUOPC Model",
		doc="NUOPC Model is a generic model component that wraps a model code so it is suitable to be plugged into a generic Driver component."
	]
	{
		
		attrib name <subroutineName>,
		
		genericImports <usesModule(NUOPC_Model)>
		{
			attrib importsGenericSS! <usesEntity(routine_SetServices)>,
			attrib importsLabelModelAdvance <usesEntity(label_ModelAdvance)>
		},
		
		implementsSetServices:SetServices,
		
		initialize 
		{
			implementsInitP1 <subroutine(#name(inout type(ESMF_GridComp) #gcomp, inout type(ESMF_State) #importParam, inout type(ESMF_State) #exportParam, inout type(ESMF_Clock) #clock, out integer #rc))>
			{
				attrib name,
				attrib importParam,
				attrib exportParam,
				advertisesImportField* <call(NUOPC_StateAdvertiseField(#addsToState, StandardName=#standardName, #rc))>,
				advertisesExportField* <call(NUOPC_StateAdvertiseField(#addsToState, StandardName=#standardName, #rc))>
				//registered
				//advertisesAtLeastOneField
				//advertisesOrRegistered
			},
			
			implementsInitP2 <subroutine(#name(inout type(ESMF_GridComp) #gcomp, inout type(ESMF_State) #importParam, inout type(ESMF_State) #exportParam, inout type(ESMF_Clock) #clock, out integer #rc))>
			{
				attrib name,
				attrib importParam,
				attrib exportParam,
				realizesImportField* <call(NUOPC_StateRealizeField(#realizedInState, field=#field, rc=#rc))>,
				realizesExportField* <call(NUOPC_StateRealizeField(#realizedInState, field=#field, rc=#rc))>
				//registered
				//realizesAtLeastOneField
				//realizesOrRegistered
			}
		},	
		
		modelAdvance*
		{
			
			attrib userRoutine,
			attrib phase,
						
			implementsSubroutine <subroutine(#userRoutine(inout type(ESMF_GridComp) *, out integer *))>,
			
			registered <#../../implementsSetServices 
				call(ESMF_MethodAdd(#ignore, 
									index?=#phase, 
									label=#importsLabelModelAdvance, 
									userRoutine=#userRoutine, 
									rc=#../../implementsSetServices/rc))>
			
		}		
	}
}
