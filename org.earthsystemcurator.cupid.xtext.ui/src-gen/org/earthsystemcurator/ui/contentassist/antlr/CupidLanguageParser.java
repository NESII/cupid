/*
* generated by Xtext
*/
package org.earthsystemcurator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.earthsystemcurator.services.CupidLanguageGrammarAccess;

public class CupidLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private CupidLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser createParser() {
		org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser result = new org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIDOrWildcardAccess().getAlternatives(), "rule__IDOrWildcard__Alternatives");
					put(grammarAccess.getIDOrPathExprAccess().getAlternatives(), "rule__IDOrPathExpr__Alternatives");
					put(grammarAccess.getPathSegmentAccess().getAlternatives(), "rule__PathSegment__Alternatives");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getCallAccess().getGroup_3(), "rule__Call__Group_3__0");
					put(grammarAccess.getCallAccess().getGroup_3_1(), "rule__Call__Group_3_1__0");
					put(grammarAccess.getCallAccess().getGroup_3_1_1(), "rule__Call__Group_3_1_1__0");
					put(grammarAccess.getActualParamAccess().getGroup(), "rule__ActualParam__Group__0");
					put(grammarAccess.getActualParamAccess().getGroup_0(), "rule__ActualParam__Group_0__0");
					put(grammarAccess.getPathExprAccess().getGroup(), "rule__PathExpr__Group__0");
					put(grammarAccess.getPathExprAccess().getGroup_2(), "rule__PathExpr__Group_2__0");
					put(grammarAccess.getMappingsAccess().getMappingsAssignment(), "rule__Mappings__MappingsAssignment");
					put(grammarAccess.getMappingAccess().getContextAssignment_0(), "rule__Mapping__ContextAssignment_0");
					put(grammarAccess.getMappingAccess().getMappingAssignment_1(), "rule__Mapping__MappingAssignment_1");
					put(grammarAccess.getCallAccess().getSubroutineNameAssignment_2(), "rule__Call__SubroutineNameAssignment_2");
					put(grammarAccess.getCallAccess().getParamsAssignment_3_1_0(), "rule__Call__ParamsAssignment_3_1_0");
					put(grammarAccess.getCallAccess().getParamsAssignment_3_1_1_1(), "rule__Call__ParamsAssignment_3_1_1_1");
					put(grammarAccess.getActualParamAccess().getKeywordAssignment_0_0(), "rule__ActualParam__KeywordAssignment_0_0");
					put(grammarAccess.getActualParamAccess().getOptionalAssignment_0_1(), "rule__ActualParam__OptionalAssignment_0_1");
					put(grammarAccess.getActualParamAccess().getValueAssignment_1(), "rule__ActualParam__ValueAssignment_1");
					put(grammarAccess.getIDOrWildcardAccess().getIdAssignment_0(), "rule__IDOrWildcard__IdAssignment_0");
					put(grammarAccess.getIDOrWildcardAccess().getWildcardAssignment_1(), "rule__IDOrWildcard__WildcardAssignment_1");
					put(grammarAccess.getPathExprAccess().getSegmentsAssignment_1(), "rule__PathExpr__SegmentsAssignment_1");
					put(grammarAccess.getPathExprAccess().getSegmentsAssignment_2_1(), "rule__PathExpr__SegmentsAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser typedParser = (org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser) parser;
			typedParser.entryRuleMappings();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CupidLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CupidLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
