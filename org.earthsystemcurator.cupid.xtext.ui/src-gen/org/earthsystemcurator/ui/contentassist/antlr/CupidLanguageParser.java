/*
* generated by Xtext
*/
package org.earthsystemcurator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.earthsystemcurator.services.CupidLanguageGrammarAccess;

public class CupidLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private CupidLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser createParser() {
		org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser result = new org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSubconceptAccess().getAlternatives_4(), "rule__Subconcept__Alternatives_4");
					put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
					put(grammarAccess.getImplicitContextMappingAccess().getAlternatives(), "rule__ImplicitContextMapping__Alternatives");
					put(grammarAccess.getIntentAccess().getAlternatives(), "rule__Intent__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getIDOrWildcardAccess().getAlternatives(), "rule__IDOrWildcard__Alternatives");
					put(grammarAccess.getIDOrPathExprAccess().getAlternatives(), "rule__IDOrPathExpr__Alternatives");
					put(grammarAccess.getPathSegmentAccess().getAlternatives(), "rule__PathSegment__Alternatives");
					put(grammarAccess.getLanguageAccess().getGroup(), "rule__Language__Group__0");
					put(grammarAccess.getSubconceptAccess().getGroup(), "rule__Subconcept__Group__0");
					put(grammarAccess.getSubconceptAccess().getGroup_4_0(), "rule__Subconcept__Group_4_0__0");
					put(grammarAccess.getSubconceptAccess().getGroup_4_1(), "rule__Subconcept__Group_4_1__0");
					put(grammarAccess.getSubconceptAccess().getGroup_4_1_0(), "rule__Subconcept__Group_4_1_0__0");
					put(grammarAccess.getSubconceptAccess().getGroup_4_1_1(), "rule__Subconcept__Group_4_1_1__0");
					put(grammarAccess.getSubconceptAccess().getGroup_4_1_1_2(), "rule__Subconcept__Group_4_1_1_2__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getConceptDefAccess().getGroup(), "rule__ConceptDef__Group__0");
					put(grammarAccess.getConceptDefAccess().getGroup_3(), "rule__ConceptDef__Group_3__0");
					put(grammarAccess.getConceptDefAccess().getGroup_4(), "rule__ConceptDef__Group_4__0");
					put(grammarAccess.getConceptDefAccess().getGroup_4_2(), "rule__ConceptDef__Group_4_2__0");
					put(grammarAccess.getConceptDefBodyAccess().getGroup(), "rule__ConceptDefBody__Group__0");
					put(grammarAccess.getConceptDefBodyAccess().getGroup_2(), "rule__ConceptDefBody__Group_2__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_2(), "rule__Module__Group_2__0");
					put(grammarAccess.getModuleNameAccess().getGroup(), "rule__ModuleName__Group__0");
					put(grammarAccess.getUsesModuleAccess().getGroup(), "rule__UsesModule__Group__0");
					put(grammarAccess.getUsesEntityAccess().getGroup(), "rule__UsesEntity__Group__0");
					put(grammarAccess.getSubroutineAccess().getGroup(), "rule__Subroutine__Group__0");
					put(grammarAccess.getSubroutineAccess().getGroup_3(), "rule__Subroutine__Group_3__0");
					put(grammarAccess.getSubroutineAccess().getGroup_3_1(), "rule__Subroutine__Group_3_1__0");
					put(grammarAccess.getSubroutineAccess().getGroup_3_1_1(), "rule__Subroutine__Group_3_1_1__0");
					put(grammarAccess.getFormalParamAccess().getGroup(), "rule__FormalParam__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_4(), "rule__Type__Group_4__0");
					put(grammarAccess.getTypeAccess().getGroup_5(), "rule__Type__Group_5__0");
					put(grammarAccess.getSubroutineNameAccess().getGroup(), "rule__SubroutineName__Group__0");
					put(grammarAccess.getSubroutineNameAccess().getGroup_2(), "rule__SubroutineName__Group_2__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getCallAccess().getGroup_3(), "rule__Call__Group_3__0");
					put(grammarAccess.getCallAccess().getGroup_3_1(), "rule__Call__Group_3_1__0");
					put(grammarAccess.getCallAccess().getGroup_3_1_1(), "rule__Call__Group_3_1_1__0");
					put(grammarAccess.getActualParamAccess().getGroup(), "rule__ActualParam__Group__0");
					put(grammarAccess.getActualParamAccess().getGroup_0(), "rule__ActualParam__Group_0__0");
					put(grammarAccess.getPathExprAccess().getGroup(), "rule__PathExpr__Group__0");
					put(grammarAccess.getPathExprAccess().getGroup_2(), "rule__PathExpr__Group_2__0");
					put(grammarAccess.getLanguageAccess().getNameAssignment_1(), "rule__Language__NameAssignment_1");
					put(grammarAccess.getLanguageAccess().getUriAssignment_2(), "rule__Language__UriAssignment_2");
					put(grammarAccess.getLanguageAccess().getConceptDefAssignment_4(), "rule__Language__ConceptDefAssignment_4");
					put(grammarAccess.getSubconceptAccess().getAttribAssignment_0(), "rule__Subconcept__AttribAssignment_0");
					put(grammarAccess.getSubconceptAccess().getNameAssignment_1(), "rule__Subconcept__NameAssignment_1");
					put(grammarAccess.getSubconceptAccess().getCardinalityAssignment_2(), "rule__Subconcept__CardinalityAssignment_2");
					put(grammarAccess.getSubconceptAccess().getEssentialAssignment_3(), "rule__Subconcept__EssentialAssignment_3");
					put(grammarAccess.getSubconceptAccess().getRefAssignment_4_0_0(), "rule__Subconcept__RefAssignment_4_0_0");
					put(grammarAccess.getSubconceptAccess().getConceptDefAssignment_4_0_1(), "rule__Subconcept__ConceptDefAssignment_4_0_1");
					put(grammarAccess.getSubconceptAccess().getMappingAssignment_4_1_0_1(), "rule__Subconcept__MappingAssignment_4_1_0_1");
					put(grammarAccess.getSubconceptAccess().getAnnotationAssignment_4_1_1_1(), "rule__Subconcept__AnnotationAssignment_4_1_1_1");
					put(grammarAccess.getSubconceptAccess().getAnnotationAssignment_4_1_1_2_1(), "rule__Subconcept__AnnotationAssignment_4_1_1_2_1");
					put(grammarAccess.getSubconceptAccess().getBodyAssignment_4_1_2(), "rule__Subconcept__BodyAssignment_4_1_2");
					put(grammarAccess.getAnnotationAccess().getKeyAssignment_0(), "rule__Annotation__KeyAssignment_0");
					put(grammarAccess.getAnnotationAccess().getValueAssignment_2(), "rule__Annotation__ValueAssignment_2");
					put(grammarAccess.getConceptDefAccess().getTopAssignment_0(), "rule__ConceptDef__TopAssignment_0");
					put(grammarAccess.getConceptDefAccess().getNameAssignment_2(), "rule__ConceptDef__NameAssignment_2");
					put(grammarAccess.getConceptDefAccess().getMappingAssignment_3_1(), "rule__ConceptDef__MappingAssignment_3_1");
					put(grammarAccess.getConceptDefAccess().getAnnotationAssignment_4_1(), "rule__ConceptDef__AnnotationAssignment_4_1");
					put(grammarAccess.getConceptDefAccess().getAnnotationAssignment_4_2_1(), "rule__ConceptDef__AnnotationAssignment_4_2_1");
					put(grammarAccess.getConceptDefAccess().getBodyAssignment_5(), "rule__ConceptDef__BodyAssignment_5");
					put(grammarAccess.getConceptDefBodyAccess().getSubconceptAssignment_1(), "rule__ConceptDefBody__SubconceptAssignment_1");
					put(grammarAccess.getConceptDefBodyAccess().getSubconceptAssignment_2_1(), "rule__ConceptDefBody__SubconceptAssignment_2_1");
					put(grammarAccess.getCardinalityAccess().getZeroOrMoreAssignment_0(), "rule__Cardinality__ZeroOrMoreAssignment_0");
					put(grammarAccess.getCardinalityAccess().getOneOrMoreAssignment_1(), "rule__Cardinality__OneOrMoreAssignment_1");
					put(grammarAccess.getMappingAccess().getContextAssignment_0(), "rule__Mapping__ContextAssignment_0");
					put(grammarAccess.getMappingAccess().getMappingAssignment_1(), "rule__Mapping__MappingAssignment_1");
					put(grammarAccess.getModuleAccess().getNameAssignment_2_1(), "rule__Module__NameAssignment_2_1");
					put(grammarAccess.getUsesModuleAccess().getNameAssignment_2(), "rule__UsesModule__NameAssignment_2");
					put(grammarAccess.getUsesEntityAccess().getNameAssignment_2(), "rule__UsesEntity__NameAssignment_2");
					put(grammarAccess.getSubroutineAccess().getNameAssignment_2(), "rule__Subroutine__NameAssignment_2");
					put(grammarAccess.getSubroutineAccess().getParamsAssignment_3_1_0(), "rule__Subroutine__ParamsAssignment_3_1_0");
					put(grammarAccess.getSubroutineAccess().getParamsAssignment_3_1_1_1(), "rule__Subroutine__ParamsAssignment_3_1_1_1");
					put(grammarAccess.getFormalParamAccess().getIntentAssignment_0(), "rule__FormalParam__IntentAssignment_0");
					put(grammarAccess.getFormalParamAccess().getTypeAssignment_1(), "rule__FormalParam__TypeAssignment_1");
					put(grammarAccess.getFormalParamAccess().getNameAssignment_2(), "rule__FormalParam__NameAssignment_2");
					put(grammarAccess.getIntentAccess().getInAssignment_0(), "rule__Intent__InAssignment_0");
					put(grammarAccess.getIntentAccess().getOutAssignment_1(), "rule__Intent__OutAssignment_1");
					put(grammarAccess.getIntentAccess().getInoutAssignment_2(), "rule__Intent__InoutAssignment_2");
					put(grammarAccess.getTypeAccess().getIntegerAssignment_0(), "rule__Type__IntegerAssignment_0");
					put(grammarAccess.getTypeAccess().getCharacterAssignment_1(), "rule__Type__CharacterAssignment_1");
					put(grammarAccess.getTypeAccess().getLogicalAssignment_2(), "rule__Type__LogicalAssignment_2");
					put(grammarAccess.getTypeAccess().getRealAssignment_3(), "rule__Type__RealAssignment_3");
					put(grammarAccess.getTypeAccess().getDoubleAssignment_4_0(), "rule__Type__DoubleAssignment_4_0");
					put(grammarAccess.getTypeAccess().getDerivedAssignment_5_0(), "rule__Type__DerivedAssignment_5_0");
					put(grammarAccess.getTypeAccess().getDerivedTypeAssignment_5_2(), "rule__Type__DerivedTypeAssignment_5_2");
					put(grammarAccess.getSubroutineNameAccess().getNameAssignment_2_1(), "rule__SubroutineName__NameAssignment_2_1");
					put(grammarAccess.getCallAccess().getSubroutineNameAssignment_2(), "rule__Call__SubroutineNameAssignment_2");
					put(grammarAccess.getCallAccess().getParamsAssignment_3_1_0(), "rule__Call__ParamsAssignment_3_1_0");
					put(grammarAccess.getCallAccess().getParamsAssignment_3_1_1_1(), "rule__Call__ParamsAssignment_3_1_1_1");
					put(grammarAccess.getActualParamAccess().getKeywordAssignment_0_0(), "rule__ActualParam__KeywordAssignment_0_0");
					put(grammarAccess.getActualParamAccess().getOptionalAssignment_0_1(), "rule__ActualParam__OptionalAssignment_0_1");
					put(grammarAccess.getActualParamAccess().getValueAssignment_1(), "rule__ActualParam__ValueAssignment_1");
					put(grammarAccess.getIDOrWildcardAccess().getIdAssignment_0(), "rule__IDOrWildcard__IdAssignment_0");
					put(grammarAccess.getIDOrWildcardAccess().getWildcardAssignment_1(), "rule__IDOrWildcard__WildcardAssignment_1");
					put(grammarAccess.getPathExprAccess().getSegmentsAssignment_1(), "rule__PathExpr__SegmentsAssignment_1");
					put(grammarAccess.getPathExprAccess().getSegmentsAssignment_2_1(), "rule__PathExpr__SegmentsAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser typedParser = (org.earthsystemcurator.ui.contentassist.antlr.internal.InternalCupidLanguageParser) parser;
			typedParser.entryRuleLanguage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CupidLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CupidLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
