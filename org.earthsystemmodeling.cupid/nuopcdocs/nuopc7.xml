<docs>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver">
	<![CDATA[
	<b>NUOPC Driver</b><hr/>
	Driver component that drives Model, Mediator, and Connector components. The default is to use explicit time stepping. For every Driver time step the same sequence of Model, Mediator, and Connector Run methods are called. The run sequence is fully customizable.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.SetServicesCodeConcept">
	<![CDATA[
	<b>Set Services</b><hr/>
	All ESMF-based component must define a SetServices subroutine. Within NUOPC components, the SetServices subroutine is used to define which component is being extended (e.g., NUOPC_Driver), to register entry points, and to register specialization subroutines.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.Initialization">
	<![CDATA[
	
	<b>Initialize</b><hr/>

			<UL>
		<LI>phase 0: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
		  
		<UL>
		<LI>Initialize the <TT>InitializePhaseMap</TT> Attribute according to the NUOPC Initialize Phase Definition (IPD) version 00 (see section 2.4.2 for a precise definition), with the following mapping:
		    
		<UL>
		<LI>IPDv00p1 = phase 1: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
		    
		</LI>
		</UL>
		</LI>
		</UL>  
		</LI>
		<LI>phase 1: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p1)
		  
		<UL>
		<LI>Allocate and initialize the internal state.
		</LI>
		<LI>If the internal clock is not yet set, set the default internal clock to be a copy of the incoming clock, if the incoming clock is valid.
		</LI>
		<LI><I>Required specialization</I> to set number of Model+Mediator components, <TT>modelCount</TT>, in the internal state: <TT>label_SetModelCount</TT>.
		</LI>
		<LI>Allocate internal storage according to <TT>modelCount</TT>.
		</LI>
		<LI><I>Optional specialization</I> to provide Model, Mediator, and Connector <TT>petList</TT> members in the internal state: <TT>label_SetModelPetList</TT>.
		</LI>
		<LI>Create Model and Mediator components with their import and export States.
		</LI>
		<LI>Attach standard NUOPC Model Component metadata.
		</LI>
		<LI>Create Connector components.
		</LI>
		<LI>Attach standard NUOPC Connector Component metadata.
		</LI>
		<LI>Initialize the default run sequence.
		</LI>
		<LI><I>Required specialization</I> to set component services: <TT>label_SetModelServices</TT>. 
		  
		<UL>
		<LI>Call into SetServices() for all Model, Mediator, and Connector components.
		</LI>
		<LI>Optionally replace the default clock. 
		</LI>

		</UL>
		</LI>
		<LI>Execute Initialize phase=0 for all Model, Mediator, and Connector components. This is the method where each component is required to initialize its <TT>InitializePhaseMap</TT> Attribute.
		</LI>
		<LI><I>Optional specialization</I> to analyze and modify components' <TT>InitializePhaseMap</TT> Attribute before the Driver uses it: <TT>label_ModifyInitializePhaseMap</TT>.
		</LI>
		<LI>Implement the initialize sequence for the child components, compatible with up to IPD version 02, as documented in section 2.4.2.
		  
		</LI>
		</UL>
		</LI>
		</UL>	
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetModelCount">
	<![CDATA[
	<b>SetModelCount</b><hr/>
	Required specialization to set number of Model+Mediator components, modelCount, in the internal state: <tt>label_SetModelCount</tt>.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetModelPetLists">
	<![CDATA[
	<b>SetModelPetLists</b><hr/>
	Optional specialization to provide Model, Mediator, and Connector petList members in the internal state: <tt>label_SetModelPetLists</tt>.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetModelServices">
	<![CDATA[
	<b>SetModelServices</b><hr/>
	<i>Required specialization</i> to set component services: <tt>label_SetModelServices</tt>. 
		<UL>
		<LI>Call into SetServices() for all Model, Mediator, and Connector components.</LI>
		<LI>Optionally replace the default clock.</LI>
		</UL>
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetRunSequence">
	<![CDATA[
	<b>SetRunSequence</b><hr/>
	<i>Optional specialization</i> to replace the default run sequence: <tt>label_SetRunSequence</tt>. 
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel">
	<![CDATA[
	<b>NUOPC Model</b><hr/>
	A NUOC Model component with has a default <i>explicit</i> time dependency. Each time the Run method is called the model integrates one timeStep forward on the provided Clock. The Clock must be advanced between Run calls. The component's Run method flags incompatibility if the current time of the incoming Clock does not match the current time of the model.
	]]>
	</doc>
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPDv00">
	<![CDATA[
	Initialize Phase Definition version 00 (IPDv00) 
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p1">
	<![CDATA[
	<h4>IPDv01p1, IPDv02p1, IPDv03p1, IPDv04p1 - Advertise Fields
	<br/><b>(Required, Implementor Provided)</b> </h4>
	<hr/>
	Advertise model Fields in import/export States using <code>NUOPC_StateAdvertiseField()</code> and/or
	<code>NUOPC_StateAdvertiseFields()</code>. 
	<br/><br/>
	The methods above require a Standard Name for the Field, and that Standard Name must appear
	in the NUOPC Field Dictionary or a runtime error is generated.  (There is an exception to this
	rule if <code>NUOPC_FieldDictionarySetAutoAdd</code> has been set to .true.)
	<br/><br/>
	Memory is not allocated for advertised Fields, but attributes are set on the Field which
	can be used in later phases, especially for determining if another Component can provide
	and/or consume the advertised Field.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p2">
	<![CDATA[
	<h4>IPDv01p2, IPDv02p2, IPDv03p2, IPDv04p2 - (Unspecified by NUOPC)</h4>
	<hr/>
	This phase is unspecified by NUOPC for Model components.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p3">
	<![CDATA[
	<h4>IPDv00p2, IPDv01p3, IPDv02p3, IPDv03p3, IPDv04p3 - Realize Fields providing their own Grid
	<br/><b>(Required, Implementor Provided)</b> </h4>
	<hr/>
	Realize <i>connected</i> import and export Fields that have their TransferActionGeomObject attribute set to "provide", 
	i.e., that will provide their own grid structure. (This is the default value of TransferActionGeomObject.)
	
	The method <code>NUOPC_StateRealizeField()</code> is used to realize a Field.
	Only previously advertised Fields can be realized and the name of the passed in Field is used to search the State for the Field to realize.
	
	
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p4">
	<![CDATA[
	<h4>IPDv03p4, IPDv04p4 - Modify Grid/Mesh Decomposition
	<br/><b>(Optional, Implementor Provided)</b> </h4>
	<hr/>
	Optionally modify the decomposition and distribution information of any accepted Grids/Meshes by replacing the DistGrid.	
	
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p5">
	<![CDATA[
	
	
	
	]]>
	</doc>
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.Initialization">
	<![CDATA[
	<b>Initialize</b><hr/>
	<UL>
	<LI>phase 0: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	  
	<UL>
	<LI>Initialize the <TT>InitializePhaseMap</TT> Attribute according to the NUOPC Initialize Phase Definition (IPD) version 00 (see section 2.4.2 for a precise definition), with the following mapping:
	    
	<UL>
	<LI>IPDv00p1 = phase 1: (R<SMALL>EQUIRED, </SMALL>I<SMALL>MPLEMENTOR </SMALL>P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Advertise Fields in import and export States.
	      
	</LI>
	</UL>
	</LI>
	<LI>IPDv00p2 = phase 2: (R<SMALL>EQUIRED, </SMALL>I<SMALL>MPLEMENTOR </SMALL>P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Realize the advertised Fields in import and export States.
	      
	</LI>
	</UL>  
	</LI>
	<LI>IPDv00p3 = phase 3: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Check compatibility of the Fields' Connected status.
	      
	</LI>
	</UL>
	</LI>
	<LI>IPDv00p4 = phase 4: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Handle Field data initialization. Time stamp the export Fields.
	      
	</LI>
	</UL>
	</LI>
	</UL>
	</LI>
	</UL>  
	</LI>
	<LI>phase 3: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p3, IPDv01p4, IPDv02p4)
	  
	<UL>
	<LI>If the model internal clock is found to be not set, then set the model internal clock as a copy of the incoming clock. 
	</LI>
	<LI><I>Optional specialization</I> to set the internal clock and/or alarms: <TT>label_SetClock</TT>.
	</LI>
	<LI>Check compatibility, ensuring all advertised import Fields are connected.
	  
	</LI>
	</UL>  
	</LI>
	<LI>phase 4: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p4, IPDv01p5)
	  
	<UL>
	<LI><I>Optional specialization</I> to initialize export Fields: <TT>label_DataInitialize</TT>
	</LI>
	<LI>Time stamp Fields in export State for compatibility checking.
	  
	</LI>
	</UL>    
	</LI>
	<LI>phase 5: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv02p5)
	  
	<UL>
	<LI><I>Optional specialization</I> to initialize export Fields: <TT>label_DataInitialize</TT>
	</LI>
	<LI>Timestamp Fields in export State for compatibility checking.
	</LI>
	<LI>Set Component metadata used to resolve initialize data dependencies.
	  
	</LI>
	</UL>
	</LI>
	</UL>
		
	
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.InitP1">
	<![CDATA[
	<b>Initialize Phase 1 (IPDv00p1)</b><hr/>
	Advertise model Fields in import and export States.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.InitP2">
	<![CDATA[
	<b>Initialize Phase 2 (IPDv00p2)</b><hr/>
	Realize the advertised Fields in import and export States.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.Run">
	<![CDATA[
	<b>Run</b><hr/>
	<UL>
	<LI>phase 1: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	  
	<UL>
	<LI>Allocate internal state memory.
	</LI>
	<LI>Assign the <TT>driverClock</TT> member in the internal state as an alias to the incoming Clock.
	</LI>
	<LI>S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED/</SMALL>P<SMALL>ROVIDED</SMALL>: <TT>label_SetRunClock</TT> to check and set the internal Clock against the incoming Clock.
	  
	<UL>
	<LI><TT>IF</TT> (Phase specific specialization present): Execute the phase specific specialization.
	</LI>
	<LI><TT>ELSE</TT>: Execute the phase independent specialization. P<SMALL>ROVIDED</SMALL>: By default check that internal Clock and incoming Clock agree on current time and that the time step of the incoming Clock is a multiple of the internal Clock time step. Under these conditions set the internal stop time to one time step interval of the incoming Clock. Otherwise exit with error, flagging an incompatibility.
	  
	</LI>
	</UL>
	</LI>
	<LI>S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED/</SMALL>P<SMALL>ROVIDED</SMALL>: <TT>label_CheckImport</TT> to check Fields in the import State.
	  
	<UL>
	<LI><TT>IF</TT> (Phase specific specialization is present): Execute the phase specific specialization.
	</LI>
	<LI><TT>ELSE</TT>: Execute the phase independent specialization. P<SMALL>ROVIDED</SMALL>: By default check that all import Fields are at the current time of the internal Clock.
	  
	</LI>
	</UL>
	</LI>
	<LI>Time stepping loop: starting at current time, running to stop time of the internal Clock.
	  
	<UL>
	<LI>Timestamp the Fields in the export State according to the current time of the internal Clock.
	</LI>
	<LI>S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED</SMALL>: <TT>label_Advance</TT> to execute model code.
	</LI>
	<LI>Advance the current time of the internal Clock according to the time step of the internal Clock.
	  
	</LI>
	</UL>
	</LI>
	<LI>Timestamp all Fields in the export State according to the current time of the internal Clock, which now is identical to the stop time of the internal Clock.
	</LI>
	<LI>Deallocate the internal state memory.
	  
	</LI>
	</UL>
	</LI>
	</UL>
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.SetRunClock">
	<![CDATA[
	<b>SetRunClock</b><hr />
	S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED/</SMALL>P<SMALL>ROVIDED</SMALL>: <TT>label_SetRunClock</TT> to check and set the internal Clock against the incoming Clock.
	
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.CheckImport">
	<![CDATA[
	<b>CheckImport</b><hr />
	S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED/</SMALL>P<SMALL>ROVIDED</SMALL>: <TT>label_CheckImport</TT> to check Fields in the import State.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.ModelAdvance">
	<![CDATA[
	<b>ModelAdvance</b><hr />
	S<SMALL>PECIALIZATION </SMALL>R<SMALL>EQUIRED</SMALL>: <TT>label_Advance</TT> to execute model code.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.FinalizeP1">
	<![CDATA[
	<b>Finalize</b><hr />
	Optionally overwrite the provided NOOP with model finalization code.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.SetClock">
	<![CDATA[
	<b>SetClock</b><hr/>
	<i>Optional specialization</i> to set the internal clock and/or alarms: <tt>label_SetClock</tt>. 
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.DataInitialize">
	<![CDATA[
	<b>DataInitialize</b><hr/>
	<i>Optional specialization</i> to initialize export Fields: <tt>label_DataInitialize</tt>. 
	]]>
	</doc>
	
	
</docs>